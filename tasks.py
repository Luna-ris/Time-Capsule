import asyncio
import json
import logging
from datetime import datetime
from typing import List, Optional

import pytz
from celery_config import celery_app
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding
from cryptography.hazmat.backends import default_backend
from dotenv import load_dotenv
from supabase import create_client, Client
from telegram import Bot
import os
from config import SUPABASE_URL, SUPABASE_KEY, TELEGRAM_TOKEN, ENCRYPTION_KEY_BYTES, REDIS_URL

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

def fetch_data(table: str, query: dict = {}) -> List[dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase."""
    response = supabase.table(table).select("*")
    for key, value in query.items():
        response = response.eq(key, value)
    return response.execute().data

def delete_data(table: str, query: dict) -> List[dict]:
    """–£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase."""
    response = supabase.table(table).delete()
    for key, value in query.items():
        response = response.eq(key, value)
    return response.execute().data

def decrypt_data_aes(encrypted_hex: str, key: bytes) -> str:
    """–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é AES."""
    data = bytes.fromhex(encrypted_hex)
    iv, encrypted = data[:16], data[16:]
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    decryptor = cipher.decryptor()
    decrypted = decryptor.update(encrypted) + decryptor.finalize()
    unpadder = padding.PKCS7(128).unpadder()
    return unpadder.update(decrypted) + unpadder.finalize().decode('utf-8')

def get_capsule_recipients(capsule_id: int) -> List[dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∫–∞–ø—Å—É–ª—ã."""
    return fetch_data("recipients", {"capsule_id": capsule_id})

def get_chat_id(username: str) -> Optional[int]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ chat_id –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    response = fetch_data("users", {"username": username})
    return response[0]['chat_id'] if response else None

def delete_capsule(capsule_id: int):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–ø—Å—É–ª—ã –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    delete_data("recipients", {"capsule_id": capsule_id})
    delete_data("capsules", {"id": capsule_id})

@celery_app.task(name='main.send_capsule_task')
def send_capsule_task(capsule_id: int):
    """–ó–∞–¥–∞—á–∞ Celery –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–ø—Å—É–ª—ã."""
    async def send_async():
        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –∫–∞–ø—Å—É–ª—ã {capsule_id}")
            capsule = fetch_data("capsules", {"id": capsule_id})
            if not capsule:
                logger.error(f"–ö–∞–ø—Å—É–ª–∞ {capsule_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            content = json.loads(decrypt_data_aes(capsule[0]['content'], ENCRYPTION_KEY_BYTES))
            recipients = get_capsule_recipients(capsule_id)
            if not recipients:
                logger.error(f"–ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–∞–ø—Å—É–ª—ã {capsule_id}")
                return

            bot = Bot(token=TELEGRAM_TOKEN)
            creator = fetch_data("users", {"id": capsule[0]['creator_id']})
            sender_username = creator[0]['username'] if creator else "Unknown"

            for recipient in recipients:
                chat_id = get_chat_id(recipient['recipient_username'])
                if chat_id:
                    await bot.send_message(
                        chat_id=chat_id,
                        text=f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –∫–∞–ø—Å—É–ª—É –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç @{sender_username}!\n–í–æ—Ç –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:"
                    )
                    for item in content.get('text', []):
                        await bot.send_message(chat_id, item)
                    for item in content.get('stickers', []):
                        await bot.send_sticker(chat_id, item)
                    for item in content.get('photos', []):
                        await bot.send_photo(chat_id, item)
                    for item in content.get('documents', []):
                        await bot.send_document(chat_id, item)
                    for item in content.get('voices', []):
                        await bot.send_voice(chat_id, item)
                    for item in content.get('videos', []):
                        await bot.send_video(chat_id, item)
                    for item in content.get('audios', []):
                        await bot.send_audio(chat_id, item)
                    logger.info(f"–ö–∞–ø—Å—É–ª–∞ {capsule_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ @{recipient['recipient_username']}")
                else:
                    logger.warning(f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å @{recipient['recipient_username']} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            logger.info(f"–ö–∞–ø—Å—É–ª–∞ {capsule_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            delete_capsule(capsule_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–ø—Å—É–ª—ã {capsule_id}: {e}")

    asyncio.run(send_async())

async def post_init(application):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    pass
