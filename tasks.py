import json
from datetime import datetime, timedelta
import pytz
from telegram import Bot
from config import logger, TELEGRAM_TOKEN, ENCRYPTION_KEY_BYTES, celery_app
from localization import t
from database import fetch_data, delete_capsule, get_capsule_recipients, get_chat_id
from crypto import decrypt_data_aes

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á Celery
bot = Bot(TELEGRAM_TOKEN)

def send_capsule_task(capsule_id: int):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ Celery –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–ø—Å—É–ª—ã."""
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –∫–∞–ø—Å—É–ª—ã {capsule_id}")
        capsule = fetch_data("capsules", {"id": capsule_id})
        if not capsule:
            logger.error(f"–ö–∞–ø—Å—É–ª–∞ {capsule_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        content = json.loads(decrypt_data_aes(capsule[0]['content'], ENCRYPTION_KEY_BYTES))
        recipients = get_capsule_recipients(capsule_id)
        if not recipients:
            logger.error(f"–ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–∞–ø—Å—É–ª—ã {capsule_id}")
            return

        creator = fetch_data("users", {"id": capsule[0]['creator_id']})
        sender_username = creator[0]['username'] if creator else "Unknown"

        for recipient in recipients:
            chat_id = get_chat_id(recipient['recipient_username'])
            if chat_id:
                bot.send_message(chat_id=chat_id, text=t('capsule_received', sender=sender_username))
                for item in content.get('text', []):
                    bot.send_message(chat_id, item)
                for item in content.get('stickers', []):
                    bot.send_sticker(chat_id, item)
                for item in content.get('photos', []):
                    bot.send_photo(chat_id, item)
                for item in content.get('documents', []):
                    bot.send_document(chat_id, item)
                for item in content.get('voices', []):
                    bot.send_voice(chat_id, item)
                for item in content.get('videos', []):
                    bot.send_video(chat_id, item)
                for item in content.get('audios', []):
                    bot.send_audio(chat_id, item)
                logger.info(f"–ö–∞–ø—Å—É–ª–∞ {capsule_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ @{recipient['recipient_username']}")
            else:
                logger.warning(f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å @{recipient['recipient_username']} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"–ö–∞–ø—Å—É–ª–∞ {capsule_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        delete_capsule(capsule_id)

        if creator and creator[0]['chat_id']:
            bot.send_message(chat_id=creator[0]['chat_id'], text=f"üì¨ –í–∞—à–∞ –∫–∞–ø—Å—É–ª–∞ #{capsule_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Å–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–ø—Å—É–ª—ã {capsule_id}: {e}", extra={"user_id": None, "command": "send_capsule_task", "msg_content": str(e)})

def remind_capsule_task(capsule_id: int):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ Celery –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫–∞–ø—Å—É–ª–µ."""
    try:
        capsule = fetch_data("capsules", {"id": capsule_id})
        if not capsule or not capsule[0].get('scheduled_at'):
            logger.error(f"–ö–∞–ø—Å—É–ª–∞ {capsule_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏")
            return

        creator = fetch_data("users", {"id": capsule[0]['creator_id']})
        if not creator or not creator[0]['chat_id']:
            logger.warning(f"–°–æ–∑–¥–∞—Ç–µ–ª—å –∫–∞–ø—Å—É–ª—ã {capsule_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç chat_id")
            return

        scheduled_at = datetime.fromisoformat(capsule[0]['scheduled_at']).replace(tzinfo=pytz.utc)
        bot.send_message(
            chat_id=creator[0]['chat_id'],
            text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –í–∞—à–∞ –∫–∞–ø—Å—É–ª–∞ #{capsule_id} –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ {scheduled_at.strftime('%d.%m.%Y %H:%M')} (UTC)!"
        )
        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–∞–ø—Å—É–ª–µ {capsule_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∫–∞–ø—Å—É–ª—ã {capsule_id}: {e}", extra={"user_id": None, "command": "remind_capsule_task", "msg_content": str(e)})

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –≤ Celery
celery_app.task(name='main.send_capsule_task')(send_capsule_task)
celery_app.task(name='main.remind_capsule_task')(remind_capsule_task)
