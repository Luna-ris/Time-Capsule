import asyncio
import logging
import nest_asyncio
import os
import sys
import threading
import pytz
from telegram import Update, Bot, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackQueryHandler, CallbackContext, Application
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding
from cryptography.hazmat.backends import default_backend
import json
from datetime import datetime, timedelta
from supabase import create_client, Client
from typing import Optional, Dict
from collections import deque
from dotenv import load_dotenv
from tasks import send_capsule_task  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∑–∞–¥–∞—á—É Celery

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ nest_asyncio
nest_asyncio.apply()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ENCRYPTION_KEY = os.getenv("ENCRYPTION_KEY")

if not SUPABASE_URL or not SUPABASE_KEY or not TELEGRAM_TOKEN or not ENCRYPTION_KEY:
    logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    sys.exit(1)

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ –±–∞–π—Ç—ã
ENCRYPTION_KEY_BYTES = bytes.fromhex(ENCRYPTION_KEY)

supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
scheduler = AsyncIOScheduler(timezone=pytz.utc)
bot: Optional[Bot] = None

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–µ—Å–µ–¥—ã
CAPSULE_TITLE, CAPSULE_CONTENT, SCHEDULE_TIME, ADD_RECIPIENT, SELECTING_SEND_DATE, SELECTING_CAPSULE, SELECTING_CAPSULE_FOR_RECIPIENTS = range(
    7)


# –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ AES-256
def encrypt_data_aes(data: str, key: bytes) -> str:
    iv = os.urandom(16)
    cipher = Cipher(algorithms.AES(key),
                    modes.CBC(iv),
                    backend=default_backend())
    padder = padding.PKCS7(128).padder()
    padded_data = padder.update(data.encode('utf-8')) + padder.finalize()
    encryptor = cipher.encryptor()
    encrypted = encryptor.update(padded_data) + encryptor.finalize()
    return (iv + encrypted).hex()


def decrypt_data_aes(encrypted_hex: str, key: bytes) -> str:
    data = bytes.fromhex(encrypted_hex)
    iv = data[:16]
    encrypted = data[16:]
    cipher = Cipher(algorithms.AES(key),
                    modes.CBC(iv),
                    backend=default_backend())
    decryptor = cipher.decryptor()
    decrypted = decryptor.update(encrypted) + decryptor.finalize()
    unpadder = padding.PKCS7(128).unpadder()
    unpadded = unpadder.update(decrypted) + unpadder.finalize()
    return unpadded.decode('utf-8')


def fetch_data(table: str, query: dict = {}):
    response = supabase.table(table).select("*")
    for key, value in query.items():
        response = response.eq(key, value)
    response = response.execute()
    return response.data


def post_data(table: str, data: dict):
    response = supabase.table(table).insert(data).execute()
    return response.data


def update_data(table: str, query: dict, data: dict):
    query_builder = supabase.table(table).update(data)
    for key, value in query.items():
        query_builder = query_builder.eq(key, value)
    response = query_builder.execute()
    return response.data


def delete_data(table: str, query: dict):
    response = supabase.table(table).delete().eq(query).execute()
    return response.data


def get_chat_id(username: str):
    response = fetch_data("users", {"username": username})
    if response:
        return response[0]['chat_id']
    else:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None


def add_user(username: str, telegram_id: int, chat_id: int):
    existing_user = fetch_data("users", {"telegram_id": telegram_id})
    if not existing_user:
        post_data("users", {
            "telegram_id": telegram_id,
            "username": username,
            "chat_id": chat_id
        })
    else:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")


def generate_unique_capsule_number(creator_id: int) -> int:
    capsules = fetch_data("capsules", {"creator_id": creator_id})
    return len(capsules) + 1


def create_capsule(creator_id: int,
                   title: str,
                   content: str,
                   user_capsule_number: int,
                   scheduled_at: datetime = None):
    encrypted_content = encrypt_data_aes(content, ENCRYPTION_KEY_BYTES)
    data = {
        "creator_id": creator_id,
        "title": title,
        "content": encrypted_content,
        "user_capsule_number": user_capsule_number
    }
    if scheduled_at:
        data["scheduled_at"] = scheduled_at.astimezone(pytz.utc).isoformat()
    response = post_data("capsules", data)
    return response[0]['id']


def add_recipient(capsule_id: int, recipient_username: str):
    post_data("recipients", {
        "capsule_id": capsule_id,
        "recipient_username": recipient_username
    })


def delete_capsule(capsule_id: int):
    delete_data("recipients", {"capsule_id": capsule_id})
    delete_data("capsules", {"id": capsule_id})


def edit_capsule(capsule_id: int,
                 title: Optional[str] = None,
                 content: Optional[str] = None,
                 scheduled_at: Optional[datetime] = None):
    data = {}
    if title is not None:
        data["title"] = title
    if content is not None:
        encrypted_content = encrypt_data_aes(content, ENCRYPTION_KEY_BYTES)
        data["content"] = encrypted_content
    if scheduled_at is not None:
        data["scheduled_at"] = scheduled_at.astimezone(pytz.utc).isoformat()
    if data:
        update_data("capsules", {"id": capsule_id}, data)


def get_user_capsules(telegram_id: int):
    user = fetch_data("users", {"telegram_id": telegram_id})
    if not user:
        return []
    return fetch_data("capsules", {"creator_id": user[0]['id']})


def get_capsule_recipients(capsule_id: int):
    return fetch_data("recipients", {"capsule_id": capsule_id})


def add_notification(user_id: int, message: str):
    post_data("notifications", {"user_id": user_id, "message": message})


def get_user_notifications(user_id: int):
    return fetch_data("notifications", {"user_id": user_id})


async def start(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    chat_id = update.message.chat_id
    username = update.message.from_user.username
    if username:
        add_user(username, user_id, chat_id)

    start_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø TimeCapsuleBot ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ø—Å—É–ª –≤—Ä–µ–º–µ–Ω–∏.\n\n"
        "üì¶ –ß—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª—ã –≤ –∫–∞–ø—Å—É–ª—É\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏—Ö –≤–∞–º –∏–ª–∏ –¥—Ä—É–≥–∏–º –ª—é–¥—è–º –≤ –Ω—É–∂–Ω—É—é –¥–∞—Ç—É\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–ø—Å—É–ª–∞–º–∏: —Å–æ–∑–¥–∞–≤–∞—Ç—å, —É–¥–∞–ª—è—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏!\n\n"
        "üïí –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?\n"
        "1. –°–æ–∑–¥–∞–µ—à—å –∫–∞–ø—Å—É–ª—É ‚Üí 2. –î–æ–±–∞–≤–ª—è–µ—à—å —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ ‚Üí 3. –í—ã–±–∏—Ä–∞–µ—à—å –¥–∞—Ç—É –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π ‚Üí 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ—à—å!\n"
        "–¢–≤–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å ‚ú®\n\n")

    keyboard = [["üì¶ –°–æ–∑–¥–∞—Ç—å –∫–∞–ø—Å—É–ª—É", "üìÇ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–ø—Å—É–ª—ã"],
                ["üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è", "üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–ø—Å—É–ª—É"],
                ["üóë –£–¥–∞–ª–∏—Ç—å –∫–∞–ø—Å—É–ª—É", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ø—Å—É–ª—É"],
                ["üë• –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π", "‚ùì –ü–æ–º–æ—â—å"],
                ["üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏", "üí∏ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(start_text, reply_markup=reply_markup)


async def help_command(update: Update, context: CallbackContext):
    help_text = (
        "üîç **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:**\n"
        "1. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
        "2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–∞–ø—Å—É–ª—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /create_capsule.\n"
        "3. –î–æ–±–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –∫–∞–ø—Å—É–ª—É (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Å—Ç–∏–∫–µ—Ä—ã, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è).\n"
        "4. –î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_recipient.\n"
        "5. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /select_send_date.\n"
        "6. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞–ø—Å—É–ª—É –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /send_capsule.\n"
        "7. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–≤–æ–∏ –∫–∞–ø—Å—É–ª—ã —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /view_capsules.\n"
        "8. –†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –∫–∞–ø—Å—É–ª—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥ /edit_capsule –∏ /delete_capsule.\n"
        "9. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∫–∞–ø—Å—É–ª—ã —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /view_recipients.\n"
        "10. –ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /support_author.")

    keyboard = [["üì¶ –°–æ–∑–¥–∞—Ç—å –∫–∞–ø—Å—É–ª—É", "üìÇ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–ø—Å—É–ª—ã"],
                ["üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è", "üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–ø—Å—É–ª—É"],
                ["üóë –£–¥–∞–ª–∏—Ç—å –∫–∞–ø—Å—É–ª—É", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ø—Å—É–ª—É"],
                ["üë• –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π", "‚ùì –ü–æ–º–æ—â—å"],
                ["üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏", "üí∏ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(help_text, reply_markup=reply_markup)


async def create_capsule_command(update: Update, context: CallbackContext):
    try:
        user = update.message.from_user
        user_id = user.id
        username = user.username or str(user.id)

        existing_user = fetch_data("users", {"telegram_id": user_id})
        if not existing_user:
            response = post_data(
                "users", {
                    "telegram_id": user_id,
                    "username": username,
                    "chat_id": update.message.chat_id
                })
            creator_id = response[0]['id'] if response else None
        else:
            creator_id = existing_user[0]['id']

        if not creator_id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        initial_content = {
            "text": [],
            "photos": [],
            "videos": [],
            "audios": [],
            "documents": [],
            "stickers": [],
            "voices": []
        }

        json_str = json.dumps(initial_content, ensure_ascii=False)
        encrypted = encrypt_data_aes(json_str, ENCRYPTION_KEY_BYTES)

        user_capsule_number = generate_unique_capsule_number(creator_id)

        response = post_data(
            "capsules", {
                "creator_id": creator_id,
                "title": "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                "content": encrypted,
                "user_capsule_number": user_capsule_number,
                "created_at": datetime.now().isoformat()
            })
        capsule_id = response[0]['id'] if response else None

        if not capsule_id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ø—Å—É–ª—ã")
            return

        context.user_data['current_capsule'] = capsule_id
        context.user_data['capsule_content'] = initial_content

        logger.info(
            f"–°–æ–∑–¥–∞–Ω–∞ –∫–∞–ø—Å—É–ª–∞ {capsule_id} —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {initial_content}")

        await update.message.reply_text(
            f"üéâ –ö–∞–ø—Å—É–ª–∞ {capsule_id} —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            "–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Å—Ç–∏–∫–µ—Ä—ã, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è) –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_recipient."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–ø—Å—É–ª—ã: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–ø—Å—É–ª—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )


async def add_recipient_command(update: Update, context: CallbackContext):
    context.user_data['state'] = "selecting_capsule_for_recipients"
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–ø—Å—É–ª—ã, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:")


async def handle_select_capsule_for_recipients(update: Update,
                                               context: CallbackContext):
    try:
        if context.user_data.get(
                'state') == "selecting_capsule_for_recipients":
            capsule_id = int(update.message.text.strip())
            if not await check_capsule_ownership(update, capsule_id):
                return

            context.user_data['selected_capsule_id'] = capsule_id
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username1 @username2 @username3):"
            )
            context.user_data['state'] = "adding_recipient"
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞–ø—Å—É–ª—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞–ø—Å—É–ª—ã: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞–ø—Å—É–ª—ã.")


async def handle_recipient(update: Update, context: CallbackContext):
    try:
        if context.user_data.get('state') == "adding_recipient":
            usernames = update.message.text.strip().split()
            unique_usernames = set(usernames)
            capsule_id = context.user_data.get('selected_capsule_id')
            for username in unique_usernames:
                if username.startswith('@'):
                    username = username[1:]
                add_recipient(capsule_id, username)
            await update.message.reply_text(
                f"‚úÖ –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–ø—Å—É–ª—É {capsule_id}.")
            context.user_data['state'] = "idle"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )


async def view_capsules_command(update: Update, context: CallbackContext):
    try:
        user_id = update.message.from_user.id
        capsules = get_user_capsules(user_id)

        if capsules:
            response = []
            for capsule in capsules:
                created_at = datetime.fromisoformat(
                    capsule['created_at']).strftime("%d.%m.%Y %H:%M")
                status = "‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞" if capsule[
                    'scheduled_at'] else "üìù –ß–µ—Ä–Ω–æ–≤–∏–∫"
                response.append(f"üì¶ #{capsule['id']} {capsule['title']}\n"
                                f"üïí –°–æ–∑–¥–∞–Ω–∞: {created_at}\n"
                                f"üîí –°—Ç–∞—Ç—É—Å: {status}\n")

            await update.message.reply_text("üìÇ –í–∞—à–∏ –∫–∞–ø—Å—É–ª—ã:\n\n" +
                                            "\n".join(response),
                                            parse_mode="Markdown")
        else:
            await update.message.reply_text("üóÑ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞–ø—Å—É–ª.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–ø—Å—É–ª: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–ø—Å—É–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )


async def send_capsule_command(update: Update, context: CallbackContext):
    context.user_data['state'] = "sending_capsule"
    await update.message.reply_text(
        "üì® –í–≤–µ–¥–∏—Ç–µ ID –∫–∞–ø—Å—É–ª—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:")


async def handle_send_capsule(update: Update, context: CallbackContext):
    try:
        if context.user_data.get('state') == "sending_capsule":
            capsule_id = int(update.message.text.strip())
            if not await check_capsule_ownership(update, capsule_id):
                return

            capsule = fetch_data("capsules", {"id": capsule_id})[0]
            recipients = get_capsule_recipients(capsule_id)
            if not recipients:
                await update.message.reply_text(
                    "–í —ç—Ç–æ–π –∫–∞–ø—Å—É–ª–µ –Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π.\n\n"
                    "–î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_recipient.")
                return

            capsule_content = context.user_data.get('capsule_content', {})

            for recipient in recipients:
                recipient_username = recipient['recipient_username']
                chat_id = get_chat_id(recipient_username)
                if chat_id:
                    try:
                        await context.bot.send_message(
                            chat_id=chat_id,
                            text=
                            f"üéÅ –í–∞–º –ø—Ä–∏—à–ª–∞ –∫–∞–ø—Å—É–ª–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç @{update.message.from_user.username}!"
                        )
                        for text in capsule_content.get('text', []):
                            await context.bot.send_message(chat_id=chat_id,
                                                           text=text)
                        for sticker in capsule_content.get('stickers', []):
                            await context.bot.send_sticker(chat_id=chat_id,
                                                           sticker=sticker)
                        for photo in capsule_content.get('photos', []):
                            await context.bot.send_photo(chat_id=chat_id,
                                                         photo=photo)
                        for document in capsule_content.get('documents', []):
                            await context.bot.send_document(chat_id=chat_id,
                                                            document=document)
                        for voice in capsule_content.get('voices', []):
                            await context.bot.send_voice(chat_id=chat_id,
                                                         voice=voice)
                        for video in capsule_content.get('videos', []):
                            await context.bot.send_video(chat_id=chat_id,
                                                         video=video)
                        for audio in capsule_content.get('audios', []):
                            await context.bot.send_audio(chat_id=chat_id,
                                                         audio=audio)

                        await update.message.reply_text(
                            f"‚úÖ –ö–∞–ø—Å—É–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—é @{recipient_username}."
                        )
                    except Exception as e:
                        await update.message.reply_text(
                            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–ø—Å—É–ª—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é @{recipient_username}."
                        )
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞–ø—Å—É–ª—ã: {e}")
                else:
                    await update.message.reply_text(
                        f"‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å @{recipient_username} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ.\n\n"
                        "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start.")
            context.user_data['state'] = "idle"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞–ø—Å—É–ª—ã: {e}")


async def delete_capsule_command(update: Update, context: CallbackContext):
    context.user_data['state'] = "deleting_capsule"
    await update.message.reply_text(
        "üóë –í–≤–µ–¥–∏—Ç–µ ID –∫–∞–ø—Å—É–ª—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")


async def handle_delete_capsule(update: Update, context: CallbackContext):
    try:
        if context.user_data.get('state') == "deleting_capsule":
            capsule_id = int(update.message.text.strip())
            if not await check_capsule_ownership(update, capsule_id):
                return

            await update.message.reply_text(
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞–ø—Å—É–ª—É?",
                reply_markup=ReplyKeyboardMarkup([["–î–∞"], ["–ù–µ—Ç"]],
                                                 resize_keyboard=True))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–ø—Å—É–ª—ã: {e}")


async def handle_delete(update: Update, context: CallbackContext):
    if update.message.text == "–î–∞":
        capsule_id = context.user_data.get('deleting_capsule_id')
        delete_data("recipients", {"capsule_id": capsule_id})
        delete_capsule(capsule_id)
        await update.message.reply_text(f"–ö–∞–ø—Å—É–ª–∞ {capsule_id} —É–¥–∞–ª–µ–Ω–∞ ‚úÖ",
                                        reply_markup=ReplyKeyboardRemove())
    elif update.message.text == "–ù–µ—Ç":
        await update.message.reply_text("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ùå",
                                        reply_markup=ReplyKeyboardRemove())


async def handle_delete_cancel(update: Update, context: CallbackContext):
    await update.message.reply_text("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ùå",
                                    reply_markup=ReplyKeyboardRemove())


async def edit_capsule_command(update: Update, context: CallbackContext):
    context.user_data['state'] = "editing_capsule"
    await update.message.reply_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ ID –∫–∞–ø—Å—É–ª—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:")


async def handle_edit_capsule(update: Update, context: CallbackContext):
    try:
        if context.user_data.get('state') == "editing_capsule":
            capsule_id = int(update.message.text.strip())
            if not await check_capsule_ownership(update, capsule_id):
                return

            context.user_data['editing_capsule_id'] = capsule_id
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–ø—Å—É–ª—ã (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Å—Ç–∏–∫–µ—Ä—ã, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)."
            )
            context.user_data['state'] = "editing_capsule_content"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞–ø—Å—É–ª—ã: {e}")


async def handle_edit_capsule_content(update: Update,
                                      context: CallbackContext):
    try:
        if context.user_data.get('state') == "editing_capsule_content":
            capsule_id = context.user_data.get('editing_capsule_id')
            capsule_content = context.user_data.get(
                'capsule_content', {
                    "text": [],
                    "photos": [],
                    "videos": [],
                    "audios": [],
                    "documents": [],
                    "stickers": [],
                    "voices": []
                })
            capsule_content_str = json.dumps(capsule_content)
            title = "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            edit_capsule(capsule_id, title, capsule_content_str)
            await update.message.reply_text(
                f"–ö–∞–ø—Å—É–ª–∞ {capsule_id} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞.")
            context.user_data['state'] = "idle"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞–ø—Å—É–ª—ã: {e}")


async def view_recipients_command(update: Update, context: CallbackContext):
    context.user_data['state'] = "viewing_recipients"
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–ø—Å—É–ª—ã, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—ë –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:")


async def check_capsule_ownership(update: Update, capsule_id: int) -> bool:
    user_id = update.message.from_user.id
    user = fetch_data("users", {"telegram_id": user_id})
    if not user:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return False

    capsule = fetch_data("capsules", {"id": capsule_id})
    if not capsule or capsule[0]['creator_id'] != user[0]['id']:
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–∞–ø—Å—É–ª–∞ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç.")
        return False

    return True


def get_utc_time(local_time: datetime) -> datetime:
    local_tz = pytz.timezone("Europe/Moscow")
    utc_time = local_tz.localize(local_time).astimezone(pytz.utc)
    return utc_time


async def handle_view_recipients(update: Update, context: CallbackContext):
    try:
        if context.user_data.get('state') == "viewing_recipients":
            capsule_id = int(update.message.text.strip())
            if not await check_capsule_ownership(update, capsule_id):
                return

            recipients = get_capsule_recipients(capsule_id)
            if recipients:
                recipient_list = "\n".join([
                    f"@{recipient['recipient_username']}"
                    for recipient in recipients
                ])
                await update.message.reply_text(
                    f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ –∫–∞–ø—Å—É–ª—ã {capsule_id}:\n{recipient_list}")
            else:
                await update.message.reply_text(
                    f"–£ –∫–∞–ø—Å—É–ª—ã {capsule_id} –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π.\n\n"
                    "–î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_recipient.")
            context.user_data['state'] = "idle"
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞–ø—Å—É–ª—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π.")


async def handle_text(update: Update, context: CallbackContext):
    text = update.message.text.strip()

    if text in [
            "üì¶ –°–æ–∑–¥–∞—Ç—å –∫–∞–ø—Å—É–ª—É", "üìÇ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–ø—Å—É–ª—ã",
            "üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è", "üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–ø—Å—É–ª—É",
            "üóë –£–¥–∞–ª–∏—Ç—å –∫–∞–ø—Å—É–ª—É", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ø—Å—É–ª—É",
            "üë• –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π", "‚ùì –ü–æ–º–æ—â—å",
            "üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏", "üí∏ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞"
    ]:
        if text == "üì¶ –°–æ–∑–¥–∞—Ç—å –∫–∞–ø—Å—É–ª—É":
            await create_capsule_command(update, context)
        elif text == "üìÇ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–ø—Å—É–ª—ã":
            await view_capsules_command(update, context)
        elif text == "üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è":
            await add_recipient_command(update, context)
        elif text == "üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–ø—Å—É–ª—É":
            await send_capsule_command(update, context)
        elif text == "üóë –£–¥–∞–ª–∏—Ç—å –∫–∞–ø—Å—É–ª—É":
            await delete_capsule_command(update, context)
        elif text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ø—Å—É–ª—É":
            await edit_capsule_command(update, context)
        elif text == "üë• –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π":
            context.user_data['state'] = "viewing_recipients"
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–ø—Å—É–ª—ã, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—ë –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:")
        elif text == "‚ùì –ü–æ–º–æ—â—å":
            await help_command(update, context)
        elif text == "üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏":
            await select_send_date(update, context)
        elif text == "üí∏ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞":
            await support_author(update, context)
    elif context.user_data.get('state') == "adding_recipient":
        await handle_recipient(update, context)
    elif context.user_data.get('state') == "sending_capsule":
        await handle_send_capsule(update, context)
    elif context.user_data.get('state') == "deleting_capsule":
        await handle_delete_capsule(update, context)
    elif context.user_data.get('state') == "editing_capsule":
        await handle_edit_capsule(update, context)
    elif context.user_data.get('state') == "editing_capsule_content":
        await handle_edit_capsule_content(update, context)
    elif context.user_data.get('state') == "viewing_recipients":
        await handle_view_recipients(update, context)
    elif context.user_data.get('state') == "selecting_send_date":
        await handle_select_send_date(update, context)
    elif context.user_data.get('state') == "selecting_capsule":
        await handle_select_capsule(update, context)
    elif context.user_data.get('state') == "selecting_capsule_for_recipients":
        await handle_select_capsule_for_recipients(update, context)
    elif text:
        capsule_id = context.user_data.get('current_capsule')
        if not capsule_id:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞–ø—Å—É–ª—É!")
            return

        capsule_content = context.user_data.get(
            'capsule_content', {
                "text": [],
                "photos": [],
                "videos": [],
                "audios": [],
                "documents": [],
                "stickers": [],
                "voices": []
            })
        capsule_content.setdefault('text', []).append(text)
        context.user_data['capsule_content'] = capsule_content

        save_capsule_content(context, capsule_id)

        await update.message.reply_text("–¢–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–ø—Å—É–ª—É.")


async def handle_photo(update: Update, context: CallbackContext):
    try:
        capsule_id = context.user_data.get('current_capsule')
        if not capsule_id:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞–ø—Å—É–ª—É!")
            return

        capsule_content = context.user_data.get(
            'capsule_content', {
                "text": [],
                "photos": [],
                "videos": [],
                "audios": [],
                "documents": [],
                "stickers": [],
                "voices": []
            })
        photo_file = await update.message.photo[-1].get_file()
        photo_file_id = photo_file.file_id
        capsule_content.setdefault('photos', []).append(photo_file_id)
        context.user_data['capsule_content'] = capsule_content

        save_capsule_content(context, capsule_id)

        await update.message.reply_text("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–ø—Å—É–ª—É.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )


async def handle_video(update: Update, context: CallbackContext):
    try:
        capsule_id = context.user_data.get('current_capsule')
        if not capsule_id:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞–ø—Å—É–ª—É!")
            return

        capsule_content = context.user_data.get(
            'capsule_content', {
                "text": [],
                "photos": [],
                "videos": [],
                "audios": [],
                "documents": [],
                "stickers": [],
                "voices": []
            })
        video_file = await update.message.video.get_file()
        video_file_id = video_file.file_id
        capsule_content.setdefault('videos', []).append(video_file_id)
        context.user_data['capsule_content'] = capsule_content

        save_capsule_content(context, capsule_id)

        await update.message.reply_text("–í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–ø—Å—É–ª—É.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )


async def handle_audio(update: Update, context: CallbackContext):
    try:
        capsule_id = context.user_data.get('current_capsule')
        if not capsule_id:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞–ø—Å—É–ª—É!")
            return

        capsule_content = context.user_data.get(
            'capsule_content', {
                "text": [],
                "photos": [],
                "videos": [],
                "audios": [],
                "documents": [],
                "stickers": [],
                "voices": []
            })
        audio_file = await update.message.audio.get_file()
        audio_file_id = audio_file.file_id
        capsule_content.setdefault('audios', []).append(audio_file_id)
        context.user_data['capsule_content'] = capsule_content

        save_capsule_content(context, capsule_id)

        await update.message.reply_text("–ê—É–¥–∏–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–ø—Å—É–ª—É.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞—É–¥–∏–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )


async def handle_document(update: Update, context: CallbackContext):
    try:
        capsule_id = context.user_data.get('current_capsule')
        if not capsule_id:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞–ø—Å—É–ª—É!")
            return

        capsule_content = context.user_data.get(
            'capsule_content', {
                "text": [],
                "photos": [],
                "videos": [],
                "audios": [],
                "documents": [],
                "stickers": [],
                "voices": []
            })
        document_file = await update.message.document.get_file()
        document_file_id = document_file.file_id
        capsule_content.setdefault('documents', []).append(document_file_id)
        context.user_data['capsule_content'] = capsule_content

        save_capsule_content(context, capsule_id)

        await update.message.reply_text("–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–ø—Å—É–ª—É.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )


async def handle_sticker(update: Update, context: CallbackContext):
    try:
        capsule_id = context.user_data.get('current_capsule')
        if not capsule_id:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞–ø—Å—É–ª—É!")
            return

        capsule_content = context.user_data.get(
            'capsule_content', {
                "text": [],
                "photos": [],
                "videos": [],
                "audios": [],
                "documents": [],
                "stickers": [],
                "voices": []
            })
        sticker_file = await update.message.sticker.get_file()
        sticker_file_id = sticker_file.file_id
        capsule_content.setdefault('stickers', []).append(sticker_file_id)
        context.user_data['capsule_content'] = capsule_content

        save_capsule_content(context, capsule_id)

        await update.message.reply_text("–°—Ç–∏–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–ø—Å—É–ª—É.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )


async def handle_voice(update: Update, context: CallbackContext):
    try:
        capsule_id = context.user_data.get('current_capsule')
        if not capsule_id:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞–ø—Å—É–ª—É!")
            return

        capsule_content = context.user_data.get(
            'capsule_content', {
                "text": [],
                "photos": [],
                "videos": [],
                "audios": [],
                "documents": [],
                "stickers": [],
                "voices": []
            })
        voice_file = await update.message.voice.get_file()
        voice_file_id = voice_file.file_id
        capsule_content.setdefault('voices', []).append(voice_file_id)
        context.user_data['capsule_content'] = capsule_content

        save_capsule_content(context, capsule_id)

        await update.message.reply_text(
            "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–ø—Å—É–ª—É.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )


async def select_send_date(update: Update, context: CallbackContext):
    context.user_data['state'] = "selecting_capsule"
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–ø—Å—É–ª—ã, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏:")


async def handle_select_capsule(update: Update, context: CallbackContext):
    try:
        if context.user_data.get('state') == "selecting_capsule":
            capsule_id = int(update.message.text.strip())
            if not await check_capsule_ownership(update, capsule_id):
                return

            context.user_data['selected_capsule_id'] = capsule_id
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥ —á–∞—Å:–º–∏–Ω—É—Ç–∞:—Å–µ–∫—É–Ω–¥–∞':"
            )
            context.user_data['state'] = "selecting_send_date"
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞–ø—Å—É–ª—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞–ø—Å—É–ª—ã: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞–ø—Å—É–ª—ã.")

        # –í–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ handle_select_send_date
        async def handle_select_send_date(update: Update,
                                          context: CallbackContext):
            try:
                if context.user_data.get('state') == "selecting_send_date":
                    send_date_str = update.message.text.strip()
                    send_date_naive = datetime.strptime(
                        send_date_str, "%d.%m.%Y %H:%M:%S")
                    send_date = get_utc_time(send_date_naive)
                    capsule_id = context.user_data.get('selected_capsule_id')

                    job_id = f"capsule_{capsule_id}"
                    if scheduler.get_job(job_id):
                        scheduler.remove_job(job_id)

                    edit_capsule(capsule_id, scheduled_at=send_date)

                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Celery –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
                    send_capsule_task.apply_async((capsule_id, ),
                                                  eta=send_date)

                    logger.info(
                        f"–ó–∞–¥–∞—á–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–∞–ø—Å—É–ª—ã {capsule_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Celery –Ω–∞ {send_date}."
                    )

                    await update.message.reply_text(
                        f"–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {send_date}.")
                    context.user_data['state'] = "idle"
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥ —á–∞—Å:–º–∏–Ω—É—Ç–∞:—Å–µ–∫—É–Ω–¥–∞'."
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏.")


async def send_capsule_job(application: Application, capsule_id: int,
                           update: Update):
    try:
        logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–ø—Å—É–ª—ã {capsule_id}")

        capsule = fetch_data("capsules", {"id": capsule_id})
        if not capsule:
            logger.error(f"–ö–∞–ø—Å—É–ª–∞ {capsule_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        encrypted_content = capsule[0]['content']
        decrypted = decrypt_data_aes(encrypted_content, ENCRYPTION_KEY_BYTES)
        content = json.loads(decrypted)

        recipients = get_capsule_recipients(capsule_id)
        if not recipients:
            logger.error(f"–ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–∞–ø—Å—É–ª—ã {capsule_id}")
            return

        for recipient in recipients:
            recipient_username = recipient['recipient_username']
            chat_id = get_chat_id(recipient_username)
            if chat_id:
                try:
                    await application.bot.send_message(
                        chat_id=chat_id,
                        text=
                        f"üéÅ –í–∞–º –ø—Ä–∏—à–ª–∞ –∫–∞–ø—Å—É–ª–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç @{update.message.from_user.username}!"
                    )
                    for text in content.get('text', []):
                        await application.bot.send_message(chat_id=chat_id,
                                                           text=text)
                    for sticker in content.get('stickers', []):
                        await application.bot.send_sticker(chat_id=chat_id,
                                                           sticker=sticker)
                    for photo in content.get('photos', []):
                        await application.bot.send_photo(chat_id=chat_id,
                                                         photo=photo)
                    for document in content.get('documents', []):
                        await application.bot.send_document(chat_id=chat_id,
                                                            document=document)
                    for voice in content.get('voices', []):
                        await application.bot.send_voice(chat_id=chat_id,
                                                         voice=voice)
                    for video in content.get('videos', []):
                        await application.bot.send_video(chat_id=chat_id,
                                                         video=video)
                    for audio in content.get('audios', []):
                        await application.bot.send_audio(chat_id=chat_id,
                                                         audio=audio)

                    await application.bot.send_message(
                        chat_id=chat_id,
                        text=
                        f"üéÅ –í–∞–º –ø—Ä–∏—à–ª–∞ –∫–∞–ø—Å—É–ª–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç @{update.message.from_user.username}!"
                    )
                except Exception as e:
                    logger.error(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–ø—Å—É–ª—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é @{recipient_username}: {str(e)}"
                    )
            else:
                logger.error(
                    f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å @{recipient_username} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ."
                )

        logger.info(f"–ö–∞–ø—Å—É–ª–∞ {capsule_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–ó–∞–¥–∞—á–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {str(e)}")
        raise


async def support_author(update: Update, context: CallbackContext):
    DONATION_URL = "https://www.donationalerts.com/r/lunarisqqq"
    await update.message.reply_text(
        f"‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –ø–æ —Å—Å—ã–ª–∫–µ:\n{DONATION_URL}")


def save_capsule_content(context: CallbackContext, capsule_id: int):
    try:
        content = context.user_data.get('capsule_content', {})
        validated_content = {
            "text": [str(item) for item in content.get("text", [])],
            "photos": [str(item) for item in content.get("photos", [])],
            "videos": [str(item) for item in content.get("videos", [])],
            "audios": [str(item) for item in content.get("audios", [])],
            "documents": [str(item) for item in content.get("documents", [])],
            "stickers": [str(item) for item in content.get("stickers", [])],
            "voices": [str(item) for item in content.get("voices", [])]
        }

        json_str = json.dumps(validated_content, ensure_ascii=False)
        encrypted = encrypt_data_aes(json_str, ENCRYPTION_KEY_BYTES)
        update_data("capsules", {"id": capsule_id}, {"content": encrypted})

        logger.info(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –∫–∞–ø—Å—É–ª—ã {capsule_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {str(e)}")
        raise


async def post_init(application):
    logger.info("–ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
    try:
        capsules = fetch_data("capsules")
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(capsules)} –∫–∞–ø—Å—É–ª –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

        now = datetime.now(pytz.utc)
        logger.info(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è UTC: {now}")

        for capsule in capsules:
            if capsule.get('scheduled_at'):
                scheduled_at = datetime.fromisoformat(
                    capsule['scheduled_at']).replace(tzinfo=pytz.utc)
                logger.info(
                    f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ø—Å—É–ª—ã {capsule['id']}, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –Ω–∞ {scheduled_at}"
                )

                if scheduled_at > now:
                    logger.info(
                        f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–ø—Å—É–ª—ã {capsule['id']}")
                    scheduler.add_job(
                        send_capsule_job,
                        'date',
                        run_date=scheduled_at,
                        args=[application, capsule['id'], update],
                        id=f"capsule_{capsule['id']}",
                        timezone=pytz.utc)
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {str(e)}")


async def check_bot_permissions(context: CallbackContext):
    try:
        me = await context.bot.get_me()
        logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ @{me.username}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–æ—Ç–∞: {str(e)}")
        sys.exit(1)


async def main():
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    await check_bot_permissions(application)

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(
        CommandHandler("create_capsule", create_capsule_command))
    application.add_handler(
        CommandHandler("add_recipient", add_recipient_command))
    application.add_handler(
        CommandHandler("view_capsules", view_capsules_command))
    application.add_handler(
        CommandHandler("send_capsule", send_capsule_command))
    application.add_handler(
        CommandHandler("delete_capsule", delete_capsule_command))
    application.add_handler(
        CommandHandler("edit_capsule", edit_capsule_command))
    application.add_handler(
        CommandHandler("view_recipients", view_recipients_command))
    application.add_handler(CommandHandler("support_author", support_author))
    application.add_handler(
        CommandHandler("select_send_date", select_send_date))

    application.add_handler(
        CallbackQueryHandler(handle_delete, pattern="^delete_confirm_"))
    application.add_handler(
        CallbackQueryHandler(handle_delete_cancel, pattern="^delete_cancel"))

    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.VIDEO, handle_video))
    application.add_handler(MessageHandler(filters.AUDIO, handle_audio))
    application.add_handler(
        MessageHandler(filters.Document.ALL, handle_document))
    application.add_handler(MessageHandler(filters.Sticker.ALL,
                                           handle_sticker))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))

    scheduler.start()

    await application.initialize()
    await post_init(application)
    await application.start()
    await application.updater.start_polling()
    await asyncio.Event().wait()


if __name__ == "__main__":
    asyncio.run(main())
