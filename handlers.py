import json
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from config import logger, ENCRYPTION_KEY_BYTES
from crypto import decrypt_data_aes
from localization import t, LOCALE
from database import (
    fetch_data, post_data, add_user, create_capsule, add_recipient,
    get_user_capsules, get_capsule_recipients, delete_capsule, edit_capsule,
    generate_unique_capsule_number, update_data, get_chat_id
)
from utils import check_capsule_ownership, save_capsule_content, convert_to_utc, save_send_date
import pytz

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ø—Å—É–ª—ã
CREATING_CAPSULE_TITLE = "creating_capsule_title"
CREATING_CAPSULE_CONTENT = "creating_capsule_content"
CREATING_CAPSULE_RECIPIENTS = "creating_capsule_recipients"
CREATING_CAPSULE_DATE = "creating_capsule_date"
SELECTING_CAPSULE = "selecting_capsule"
SELECTING_CAPSULE_FOR_RECIPIENTS = "selecting_capsule_for_recipients"
EDITING_CAPSULE_CONTENT = "editing_capsule_content"

async def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    add_user(user.username or str(user.id), user.id, update.effective_chat.id)
    keyboard = [
        [t("create_capsule_btn", locale=LOCALE), t("view_capsules_btn", locale=LOCALE)],
        [t("add_recipient_btn", locale=LOCALE), t("send_capsule_btn", locale=LOCALE)],
        [t("delete_capsule_btn", locale=LOCALE), t("edit_capsule_btn", locale=LOCALE)],
        [t("view_recipients_btn", locale=LOCALE), t("help_btn", locale=LOCALE)],
        [t("select_send_date_btn", locale=LOCALE), t("support_author_btn", locale=LOCALE)],
        [t("change_language_btn", locale=LOCALE)]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.effective_message.reply_text(t('start_message', locale=LOCALE), reply_markup=reply_markup)

async def help_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    keyboard = [
        [t("create_capsule_btn", locale=LOCALE), t("view_capsules_btn", locale=LOCALE)],
        [t("add_recipient_btn", locale=LOCALE), t("send_capsule_btn", locale=LOCALE)],
        [t("delete_capsule_btn", locale=LOCALE), t("edit_capsule_btn", locale=LOCALE)],
        [t("view_recipients_btn", locale=LOCALE), t("help_btn", locale=LOCALE)],
        [t("select_send_date_btn", locale=LOCALE), t("support_author_btn", locale=LOCALE)],
        [t("change_language_btn", locale=LOCALE)]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.effective_message.reply_text(t('help_message', locale=LOCALE), reply_markup=reply_markup)

async def create_capsule_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /create_capsule ‚Äî –Ω–∞—á–∞–ª–æ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞."""
    context.user_data['state'] = CREATING_CAPSULE_TITLE
    context.user_data['capsule_content'] = {"text": [], "photos": [], "videos": [], "audios": [],
                                            "documents": [], "stickers": [], "voices": []}
    await update.effective_message.reply_text("üì¶ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–ø—Å—É–ª—ã:")

async def show_capsule_selection(update: Update, context: CallbackContext, action: str):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–ø—Å—É–ª—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    capsules = get_user_capsules(update.effective_user.id)
    if not capsules:
        await update.effective_message.reply_text(t('no_capsules', locale=LOCALE))
        return False

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–ø—Å—É–ª—ã –ø–æ ID
    capsules = sorted(capsules, key=lambda x: x['id'])
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(capsules)} –∫–∞–ø—Å—É–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    page_key = f"{action}_page"
    page = context.user_data.get(page_key, 1)
    capsules_per_page = 10  # 5 —Å—Ç—Ä–æ–∫ –ø–æ 2 —Å—Ç–æ–ª–±—Ü–∞ = 10 –∫–∞–ø—Å—É–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    total_pages = (len(capsules) + capsules_per_page - 1) // capsules_per_page  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: total_pages –≤–º–µ—Å—Ç–æ total Wages

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    page = max(1, min(page, total_pages))
    logger.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page} –∏–∑ {total_pages} –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è {action}")

    # –í—ã–±–∏—Ä–∞–µ–º –∫–∞–ø—Å—É–ª—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * capsules_per_page
    end_idx = start_idx + capsules_per_page
    current_capsules = capsules[start_idx:end_idx]
    logger.info(f"–í—ã–±—Ä–∞–Ω—ã –∫–∞–ø—Å—É–ª—ã —Å –∏–Ω–¥–µ–∫—Å–∞ {start_idx} –ø–æ {end_idx}: {len(current_capsules)} –∫–∞–ø—Å—É–ª")

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ 2 —Å—Ç–æ–ª–±—Ü–∞
    keyboard = []
    row = []
    for i, capsule in enumerate(current_capsules):
        button_text = f"üì¶ #{capsule['id']}: {capsule['title']}"[:30]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
        button = InlineKeyboardButton(button_text, callback_data=f"{action}_{capsule['id']}")
        row.append(button)
        if len(row) == 2:  # –ï—Å–ª–∏ –≤ —Ä—è–¥—É 2 –∫–Ω–æ–ø–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard.append(row)
            row = []
    if row:  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä—è–¥, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
        keyboard.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"{action}_page_{page-1}"))
    if page < total_pages:
        nav_buttons.append(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"{action}_page_{page+1}"))
    if nav_buttons:
        keyboard.append(nav_buttons)

    reply_markup = InlineKeyboardMarkup(keyboard)
    response = f"üìã {t('select_capsule', locale=LOCALE)} (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}):\n\n"
    if update.callback_query:
        await update.callback_query.edit_message_text(response, reply_markup=reply_markup)
    else:
        await update.effective_message.reply_text(response, reply_markup=reply_markup)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    context.user_data[page_key] = page
    context.user_data['action'] = action
    return True

async def add_recipient_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_recipient."""
    if await show_capsule_selection(update, context, "add_recipient"):
        context.user_data['state'] = SELECTING_CAPSULE_FOR_RECIPIENTS

async def view_capsules_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /view_capsules —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º update.effective_user.id –≤–º–µ—Å—Ç–æ update.message.from_user.id
        capsules = get_user_capsules(update.effective_user.id)
        if not capsules:
            if update.callback_query:
                await update.callback_query.edit_message_text(t('no_capsules', locale=LOCALE))
            else:
                await update.effective_message.reply_text(t('no_capsules', locale=LOCALE))
            return

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–ø—Å—É–ª—ã –ø–æ ID –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
        capsules = sorted(capsules, key=lambda x: x['id'])

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        page = context.user_data.get('view_capsules_page', 1)
        capsules_per_page = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø—Å—É–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        total_pages = (len(capsules) + capsules_per_page - 1) // capsules_per_page

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        page = max(1, min(page, total_pages))

        # –í—ã–±–∏—Ä–∞–µ–º –∫–∞–ø—Å—É–ª—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = (page - 1) * capsules_per_page
        end_idx = start_idx + capsules_per_page
        current_capsules = capsules[start_idx:end_idx]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏
        response = f"üìã {t('your_capsules', locale=LOCALE)} (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}):\n\n"
        keyboard = []
        for capsule in current_capsules:
            # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç—É—Å, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
            button_text = f"üì¶ #{capsule['id']} {capsule['title']}"[:40]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
            button = InlineKeyboardButton(button_text, callback_data=f"view_{capsule['id']}")
            keyboard.append([button])  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        nav_buttons = []
        if page > 1:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"view_page_{page-1}"))
        if page < total_pages:
            nav_buttons.append(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"view_page_{page+1}"))
        if nav_buttons:
            keyboard.append(nav_buttons)

        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if update.callback_query:
            await update.callback_query.edit_message_text(response, reply_markup=reply_markup)
        else:
            await update.effective_message.reply_text(response, reply_markup=reply_markup)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        context.user_data['view_capsules_page'] = page

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–ø—Å—É–ª: {e}")
        if update.callback_query:
            await update.callback_query.edit_message_text(t('error_general', locale=LOCALE))
        else:
            await update.effective_message.reply_text(t('error_general', locale=LOCALE))

async def send_capsule_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /send_capsule."""
    if await show_capsule_selection(update, context, "send_capsule"):
        context.user_data['state'] = "sending_capsule"

async def delete_capsule_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete_capsule."""
    if await show_capsule_selection(update, context, "delete_capsule"):
        context.user_data['state'] = "deleting_capsule"

async def edit_capsule_command(update: Update, context: CallbackContext):
    if await show_capsule_selection(update, context, "edit_capsule"):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data['state'] = "editing_capsule"
        context.user_data['capsule_content'] = {"text": [], "photos": [], "videos": [], "audios": [],
                                                "documents": [], "stickers": [], "voices": []}

async def start_edit_capsule(update: Update, context: CallbackContext):
    query = update.callback_query
    capsule_id = context.user_data.get('selected_capsule_id')
    
    if not await check_capsule_ownership(update, capsule_id, query):
        return
    
    capsule = fetch_data("capsules", {"id": capsule_id})[0]
    content = json.loads(decrypt_data_aes(capsule[0]['content'], ENCRYPTION_KEY_BYTES))
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data['capsule_title'] = capsule['title']
    context.user_data['capsule_content'] = content
    context.user_data['state'] = CREATING_CAPSULE_CONTENT
    
    keyboard = [
        [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_capsule"),
         InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="add_more")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üì¶ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–ø—Å—É–ª—ã #{capsule_id}:
–¢–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:
{json.dumps(content, ensure_ascii=False, indent=2)}",
        reply_markup=reply_markup
    )

async def view_recipients_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /view_recipients."""
    if await show_capsule_selection(update, context, "view_recipients"):
        context.user_data['state'] = "viewing_recipients"

async def select_send_date(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /select_send_date."""
    if await show_capsule_selection(update, context, "select_send_date"):
        context.user_data['state'] = SELECTING_CAPSULE

async def support_author(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /support_author."""
    DONATION_URL = "https://www.donationalerts.com/r/lunarisqqq"
    await update.effective_message.reply_text(t('support_author', url=DONATION_URL, locale=LOCALE))

async def change_language(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /change_language."""
    keyboard = [
        [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data="ru"),
         InlineKeyboardButton("English", callback_data="en")],
        [InlineKeyboardButton("Espa√±ol", callback_data="es"),
         InlineKeyboardButton("Fran√ßais", callback_data="fr")],
        [InlineKeyboardButton("Deutsch", callback_data="de")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.effective_message.reply_text(t('select_language', locale=LOCALE), reply_markup=reply_markup)

async def handle_language_selection(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞."""
    global LOCALE
    query = update.callback_query
    lang = query.data
    LOCALE = lang
    lang_names = {
        'ru': "–†—É—Å—Å–∫–∏–π",
        'en': "English",
        'es': "Espa√±ol",
        'fr': "Fran√ßais",
        'de': "Deutsch"
    }
    new_lang = lang_names.get(lang, "Unknown")
    await query.edit_message_text(f"–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_lang}.")
    keyboard = [
        [t("create_capsule_btn", locale=LOCALE), t("view_capsules_btn", locale=LOCALE)],
        [t("add_recipient_btn", locale=LOCALE), t("send_capsule_btn", locale=LOCALE)],
        [t("delete_capsule_btn", locale=LOCALE), t("edit_capsule_btn", locale=LOCALE)],
        [t("view_recipients_btn", locale=LOCALE), t("help_btn", locale=LOCALE)],
        [t("select_send_date_btn", locale=LOCALE), t("support_author_btn", locale=LOCALE)],
        [t("change_language_btn", locale=LOCALE)]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=t('start_message', locale=LOCALE),
        reply_markup=reply_markup
    )

async def handle_inline_selection(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞–ø—Å—É–ª—ã —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é."""
    query = update.callback_query
    logger.info(f"handle_inline_selection –≤—ã–∑–≤–∞–Ω–∞ —Å callback_data: {query.data}")
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º callback_data –Ω–∞ —á–∞—Å—Ç–∏
        parts = query.data.split('_')
        if len(parts) < 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, select_send_date_page_2)
        if parts[-2] == "page":
            action_type = "_".join(parts[:-2])  # –ù–∞–ø—Ä–∏–º–µ—Ä, select_send_date
            page_number = int(parts[-1])  # –ù–∞–ø—Ä–∏–º–µ—Ä, 2
            context.user_data[f"{action_type}_page"] = page_number
            logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_number} –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è {action_type}")
            await show_capsule_selection(update, context, action_type)
            return
        else:
            # –û–±—ã—á–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞–ø—Å—É–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, select_send_date_42)
            action = "_".join(parts[:-1])  # –ù–∞–ø—Ä–∏–º–µ—Ä, select_send_date
            value = int(parts[-1])  # –ù–∞–ø—Ä–∏–º–µ—Ä, 42

        context.user_data['selected_capsule_id'] = value

        if not await check_capsule_ownership(update, value, query):
            return

        if action == "add_recipient":
            await query.edit_message_text(t('enter_recipients', locale=LOCALE))
            context.user_data['state'] = "adding_recipient"
        elif action == "send_capsule":
            await preview_capsule(update, context, value, show_buttons=True)
        elif action == "delete_capsule":
            await query.edit_message_text(
                t('confirm_delete', locale=LOCALE),
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–î–∞", callback_data="confirm_delete"),
                     InlineKeyboardButton("–ù–µ—Ç", callback_data="cancel_delete")]
                ])
            )
        elif action == "edit_capsule":
            await query.edit_message_text(t('enter_new_content', locale=LOCALE))
            context.user_data['state'] = EDITING_CAPSULE_CONTENT
            context.user_data['capsule_content'] = {"text": [], "photos": [], "videos": [], "audios": [],
                                                    "documents": [], "stickers": [], "voices": []}
        elif action == "view_recipients":
            await handle_view_recipients_logic(update, context, value)
        elif action == "select_send_date":
            keyboard = [
                [InlineKeyboardButton(t("through_week", locale=LOCALE), callback_data="week")],
                [InlineKeyboardButton(t("through_month", locale=LOCALE), callback_data="month")],
                [InlineKeyboardButton(t("select_date", locale=LOCALE), callback_data="custom")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(t('choose_send_date', locale=LOCALE), reply_markup=reply_markup)
        elif action == "view":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–ø—Å—É–ª—ã –±–µ–∑ –∫–Ω–æ–ø–æ–∫
            await preview_capsule(update, context, value, show_buttons=False)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_inline_selection: {query.data}, –æ—à–∏–±–∫–∞: {e}")
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def preview_capsule(update: Update, context: CallbackContext, capsule_id: int, show_buttons: bool = True):
    """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–ø—Å—É–ª—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º."""
    capsule = fetch_data("capsules", {"id": capsule_id})
    if not capsule:
        await update.callback_query.edit_message_text(t('invalid_capsule_id', locale=LOCALE))
        return

    content = json.loads(decrypt_data_aes(capsule[0]['content'], ENCRYPTION_KEY_BYTES))
    preview_text = "üì¶ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–ø—Å—É–ª—ã:\n"
    if content.get('text'):
        preview_text += f"–¢–µ–∫—Å—Ç:\n" + "\n".join(content['text']) + "\n"
    if content.get('photos'):
        preview_text += f"–§–æ—Ç–æ: {len(content['photos'])} —à—Ç.\n"
    if content.get('videos'):
        preview_text += f"–í–∏–¥–µ–æ: {len(content['videos'])} —à—Ç.\n"
    if content.get('audios'):
        preview_text += f"–ê—É–¥–∏–æ: {len(content['audios'])} —à—Ç.\n"
    if content.get('documents'):
        preview_text += f"–î–æ–∫—É–º–µ–Ω—Ç—ã: {len(content['documents'])} —à—Ç.\n"
    if content.get('stickers'):
        preview_text += f"–°—Ç–∏–∫–µ—Ä—ã: {len(content['stickers'])} —à—Ç.\n"
    if content.get('voices'):
        preview_text += f"–ì–æ–ª–æ—Å–æ–≤—ã–µ: {len(content['voices'])} —à—Ç.\n"

    if show_buttons:
        keyboard = [
            [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_send"),
             InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_send")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
    else:
        reply_markup = None  # –ë–µ–∑ –∫–Ω–æ–ø–æ–∫

    await update.callback_query.edit_message_text(preview_text, reply_markup=reply_markup)

async def handle_date_buttons(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏."""
    query = update.callback_query
    logger.info(f"handle_date_buttons –≤—ã–∑–≤–∞–Ω–∞ —Å callback_data: {query.data}")
    try:
        if query.data == 'week':
            send_date = datetime.now(pytz.utc) + timedelta(weeks=1)
            await save_send_date(update, context, send_date)
            await query.edit_message_text(f"üìÖ –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é ({send_date.strftime('%d.%m.%Y %H:%M:%S')})")
        elif query.data == 'month':
            send_date = datetime.now(pytz.utc) + timedelta(days=30)
            await save_send_date(update, context, send_date)
            await query.edit_message_text(f"üìÖ –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü ({send_date.strftime('%d.%m.%Y %H:%M:%S')})")
        elif query.data == 'custom':
            await query.edit_message_text(
                "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥ —á–∞—Å:–º–∏–Ω—É—Ç–∞:—Å–µ–∫—É–Ω–¥–∞'.\n"
                "–ü—Ä–∏–º–µ—Ä: 17.03.2025 21:12:00"
            )
            context.user_data['state'] = "entering_custom_date"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_date_buttons: {e}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def handle_delete_confirmation(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–ø—Å—É–ª—ã."""
    query = update.callback_query
    if query.data == "confirm_delete":
        capsule_id = context.user_data.get('selected_capsule_id')
        delete_capsule(capsule_id)
        await query.edit_message_text(t('capsule_deleted', capsule_id=capsule_id, locale=LOCALE))
    else:
        await query.edit_message_text(t('delete_canceled', locale=LOCALE))
    context.user_data['state'] = "idle"

async def handle_send_confirmation(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–ø—Å—É–ª—ã."""
    query = update.callback_query
    if query.data == "confirm_send":
        capsule_id = context.user_data.get('selected_capsule_id')
        await handle_send_capsule_logic(update, context, capsule_id)
    else:
        await query.edit_message_text("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    context.user_data['state'] = "idle"

async def handle_text(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ—à–∞–≥–æ–≤—ã–º –º–∞—Å—Ç–µ—Ä–æ–º."""
    text = update.message.text.strip()
    state = context.user_data.get('state', 'idle')
    actions = {
        t("create_capsule_btn", locale=LOCALE): create_capsule_command,
        t("view_capsules_btn", locale=LOCALE): view_capsules_command,
        t("add_recipient_btn", locale=LOCALE): add_recipient_command,
        t("send_capsule_btn", locale=LOCALE): send_capsule_command,
        t("delete_capsule_btn", locale=LOCALE): delete_capsule_command,
        t("edit_capsule_btn", locale=LOCALE): edit_capsule_command,
        t("view_recipients_btn", locale=LOCALE): view_recipients_command,
        t("help_btn", locale=LOCALE): help_command,
        t("select_send_date_btn", locale=LOCALE): select_send_date,
        t("support_author_btn", locale=LOCALE): support_author,
        t("change_language_btn", locale=LOCALE): change_language
    }
    if text in actions:
        await actions[text](update, context)
    elif state == CREATING_CAPSULE_TITLE:
        await handle_capsule_title(update, context, text)
    elif state == CREATING_CAPSULE_CONTENT:
        await handle_create_capsule_content(update, context, text)
    elif state == EDITING_CAPSULE_CONTENT:
        await handle_edit_capsule_content(update, context, text)
    elif state == CREATING_CAPSULE_RECIPIENTS:
        await handle_create_capsule_recipients(update, context, text)
    elif state == "adding_recipient":
        await handle_recipient(update, context)
    elif state == "entering_custom_date":
        await handle_select_send_date(update, context, text)
    else:
        await update.effective_message.reply_text(t('create_capsule_first', locale=LOCALE))

async def handle_capsule_title(update: Update, context: CallbackContext, title: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–ø—Å—É–ª—ã."""
    context.user_data['capsule_title'] = title
    context.user_data['state'] = CREATING_CAPSULE_CONTENT
    await update.effective_message.reply_text("üìù –î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∫–∞–ø—Å—É–ª—É (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ —Ç.–¥.):")

async def handle_create_capsule_content(update: Update, context: CallbackContext, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∫–∞–ø—Å—É–ª—É."""
    capsule_content = context.user_data.get('capsule_content', {"text": []})
    capsule_content['text'].append(text)
    context.user_data['capsule_content'] = capsule_content
    keyboard = [
        [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_capsule"),
         InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="add_more")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.effective_message.reply_text(t('text_added', locale=LOCALE), reply_markup=reply_markup)

async def handle_edit_capsule_content(update: Update, context: CallbackContext, text: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–∞–ø—Å—É–ª—ã."""
    try:
        capsule_id = context.user_data.get('selected_capsule_id')
        capsule_content = context.user_data.get('capsule_content', {"text": []})
        capsule_content['text'].append(text)
        context.user_data['capsule_content'] = capsule_content
        save_capsule_content(context, capsule_id)
        await update.effective_message.reply_text(t('capsule_edited', capsule_id=capsule_id, locale=LOCALE))
        context.user_data['state'] = "idle"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–∞–ø—Å—É–ª—ã: {e}")
        await update.effective_message.reply_text(t('error_general', locale=LOCALE))

async def handle_create_capsule_recipients(update: Update, context: CallbackContext, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –≤ –∫–∞–ø—Å—É–ª—É."""
    try:
        usernames = set(text.strip().split())
        capsule_id = context.user_data.get('current_capsule')
        if not capsule_id:
            await update.effective_message.reply_text(t('error_general', locale=LOCALE))
            return

        # –°—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        for username in usernames:
            add_recipient(capsule_id, username.lstrip('@'))

        context.user_data['capsule_recipients'] = usernames
        context.user_data['state'] = CREATING_CAPSULE_DATE
        keyboard = [
            [InlineKeyboardButton(t("through_week", locale=LOCALE), callback_data="week")],
            [InlineKeyboardButton(t("through_month", locale=LOCALE), callback_data="month")],
            [InlineKeyboardButton(t("select_date", locale=LOCALE), callback_data="custom")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.effective_message.reply_text(t('choose_send_date', locale=LOCALE), reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {e}")
        await update.effective_message.reply_text(t('error_general', locale=LOCALE))

async def handle_content_buttons(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ '–ó–∞–≤–µ—Ä—à–∏—Ç—å' –∏ '–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë'."""
    query = update.callback_query
    if query.data == "finish_capsule":
        user = update.effective_user
        existing_user = fetch_data("users", {"telegram_id": user.id})
        creator_id = existing_user[0]['id'] if existing_user else post_data("users", {
            "telegram_id": user.id,
            "username": user.username or str(user.id),
            "chat_id": update.effective_chat.id
        })[0]['id']

        content = json.dumps(context.user_data['capsule_content'], ensure_ascii=False)
        user_capsule_number = generate_unique_capsule_number(creator_id)
        capsule_id = create_capsule(creator_id, context.user_data['capsule_title'], content, user_capsule_number)
        context.user_data['current_capsule'] = capsule_id
        context.user_data['state'] = CREATING_CAPSULE_RECIPIENTS
        await query.edit_message_text(t('capsule_created', capsule_id=capsule_id, locale=LOCALE) + "\nüë• –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, @Friend1 @Friend2):")
    elif query.data == "add_more":
        await query.edit_message_text("üìù –î–æ–±–∞–≤—å—Ç–µ –µ—â—ë –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∫–∞–ø—Å—É–ª—É:")

async def handle_select_send_date(update: Update, context: CallbackContext, text: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏."""
    try:
        send_date_naive = datetime.strptime(text, "%d.%m.%Y %H:%M:%S")
        send_date_utc = convert_to_utc(text)
        now = datetime.now(pytz.utc)
        if send_date_utc <= now:
            await update.effective_message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º.\n–ü—Ä–∏–º–µ—Ä: 17.03.2025 21:12:00"
            )
            return
        await save_send_date(update, context, send_date_utc, is_message=True)
        if context.user_data.get('state') == CREATING_CAPSULE_DATE:
            await finalize_capsule_creation(update, context)
    except ValueError:
        await update.effective_message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç '–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥ —á–∞—Å:–º–∏–Ω—É—Ç–∞:—Å–µ–∫—É–Ω–¥–∞'.\n–ü—Ä–∏–º–µ—Ä: 17.03.2025 21:12:00"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        await update.effective_message.reply_text(t('error_general', locale=LOCALE))

async def finalize_capsule_creation(update: Update, context: CallbackContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ø—Å—É–ª—ã."""
    capsule_id = context.user_data['current_capsule']
    # –£–¥–∞–ª—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —É–∂–µ —Å–¥–µ–ª–∞–Ω–æ –≤ handle_create_capsule_recipients
    await update.effective_message.reply_text(t('recipients_added', capsule_id=capsule_id, locale=LOCALE))
    context.user_data['state'] = "idle"
    context.user_data.pop('capsule_title', None)
    context.user_data.pop('capsule_content', None)
    context.user_data.pop('capsule_recipients', None)
    context.user_data.pop('current_capsule', None)

async def handle_recipient(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π."""
    try:
        usernames = set(update.message.text.strip().split())
        capsule_id = context.user_data.get('selected_capsule_id')
        for username in usernames:
            add_recipient(capsule_id, username.lstrip('@'))
        await update.effective_message.reply_text(t('recipients_added', capsule_id=capsule_id, locale=LOCALE))
        context.user_data['state'] = "idle"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {e}")
        await update.effective_message.reply_text(t('error_general', locale=LOCALE))

async def handle_send_capsule_logic(update: Update, context: CallbackContext, capsule_id: int):
    """–õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–ø—Å—É–ª—ã."""
    try:
        capsule = fetch_data("capsules", {"id": capsule_id})
        if not capsule:
            await update.callback_query.edit_message_text(t('invalid_capsule_id', locale=LOCALE))
            return
        recipients = get_capsule_recipients(capsule_id)
        if not recipients:
            await update.callback_query.edit_message_text(t('no_recipients', locale=LOCALE))
            return
        content = json.loads(decrypt_data_aes(capsule[0]['content'], ENCRYPTION_KEY_BYTES))
        for recipient in recipients:
            chat_id = get_chat_id(recipient['recipient_username'])
            if chat_id:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=t('capsule_received', sender=update.effective_user.username or "Unknown", locale=LOCALE)
                )
                for item in content.get('text', []):
                    await context.bot.send_message(chat_id, item)
                for item in content.get('stickers', []):
                    await context.bot.send_sticker(chat_id, item)
                for item in content.get('photos', []):
                    await context.bot.send_photo(chat_id, item)
                for item in content.get('documents', []):
                    await context.bot.send_document(chat_id, item)
                for item in content.get('voices', []):
                    await context.bot.send_voice(chat_id, item)
                for item in content.get('videos', []):
                    await context.bot.send_video(chat_id, item)
                for item in content.get('audios', []):
                    await context.bot.send_audio(chat_id, item)
                await update.callback_query.edit_message_text(t('capsule_sent', recipient=recipient['recipient_username'], locale=LOCALE))
            else:
                await update.callback_query.edit_message_text(t('recipient_not_registered', recipient=recipient['recipient_username'], locale=LOCALE))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞–ø—Å—É–ª—ã: {e}")
        await update.callback_query.edit_message_text(t('service_unavailable', locale=LOCALE))

async def handle_view_recipients_logic(update: Update, context: CallbackContext, capsule_id: int):
    """–õ–æ–≥–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∫–∞–ø—Å—É–ª—ã."""
    try:
        recipients = get_capsule_recipients(capsule_id)
        if recipients:
            recipient_list = "\n".join([f"@{r['recipient_username']}" for r in recipients])
            await update.callback_query.edit_message_text(t('recipients_list', capsule_id=capsule_id, recipients=recipient_list, locale=LOCALE))
        else:
            await update.callback_query.edit_message_text(t('no_recipients_for_capsule', capsule_id=capsule_id, locale=LOCALE))
        context.user_data['state'] = "idle"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {e}")
        await update.callback_query.edit_message_text(t('error_general', locale=LOCALE))

async def handle_photo(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –≤ –∫–∞–ø—Å—É–ª—É."""
    if context.user_data.get('state') not in [CREATING_CAPSULE_CONTENT, EDITING_CAPSULE_CONTENT]:
        await update.effective_message.reply_text(t('create_capsule_first', locale=LOCALE))
        return
    capsule_content = context.user_data.get('capsule_content', {"photos": []})
    photo_file_id = (await update.message.photo[-1].get_file()).file_id
    capsule_content.setdefault('photos', []).append(photo_file_id)
    context.user_data['capsule_content'] = capsule_content
    keyboard = [
        [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_capsule"),
         InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="add_more")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.effective_message.reply_text(t('photo_added', locale=LOCALE), reply_markup=reply_markup)

async def handle_media(update: Update, context: CallbackContext, media_type: str, file_attr: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤."""
    if context.user_data.get('state') not in [CREATING_CAPSULE_CONTENT, EDITING_CAPSULE_CONTENT]:
        await update.effective_message.reply_text(t('create_capsule_first', locale=LOCALE))
        return
    capsule_content = context.user_data.get('capsule_content', {media_type: []})
    try:
        file_id = (await getattr(update.message, file_attr).get_file()).file_id
        capsule_content.setdefault(media_type, []).append(file_id)
        context.user_data['capsule_content'] = capsule_content
        keyboard = [
            [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_capsule"),
             InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="add_more")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.effective_message.reply_text(t(f'{media_type[:-1]}_added', locale=LOCALE), reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {media_type[:-1]}: {e}")
        await update.effective_message.reply_text(t('error_general', locale=LOCALE))

async def handle_video(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ."""
    await handle_media(update, context, "videos", "video")

async def handle_audio(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ."""
    await handle_media(update, context, "audios", "audio")

async def handle_document(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
    await handle_media(update, context, "documents", "document")

async def handle_sticker(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞."""
    await handle_media(update, context, "stickers", "sticker")

async def handle_voice(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    await handle_media(update, context, "voices", "voice")
