import logging
import asyncio
import subprocess
import time
import os
import json
import sys
from datetime import datetime, timedelta
from typing import Optional, List

import nest_asyncio
import pytz
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    CallbackContext,
)
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding
from cryptography.hazmat.backends import default_backend
from supabase import create_client, Client

# –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
LOCALE = 'ru'
TRANSLATIONS = {
    'ru': {
        "start_message": (
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TimeCapsuleBot! üì¨\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞–ø—Å—É–ª—ã –≤—Ä–µ–º–µ–Ω–∏ —Å —Ç–µ–∫—Å—Ç–æ–º, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ –¥—Ä—É–≥–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º, "
            "—á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö —Å–µ–±–µ –∏–ª–∏ –¥—Ä—É–∑—å—è–º –≤ –±—É–¥—É—â–µ–º.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
        ),
        "help_message": (
            "üìã *–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ TimeCapsuleBot*\n\n"
            "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n"
            "/create_capsule - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞–ø—Å—É–ª—É –≤—Ä–µ–º–µ–Ω–∏.\n"
            "/add_recipient - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞–ø—Å—É–ª—É.\n"
            "*–ü—Ä–∏–º–µ—Ä:* @Friend1 @Friend2\n"
            "/view_capsules - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞–ø—Å—É–ª —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–æ–º.\n"
            "/send_capsule - –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–ø—Å—É–ª—É –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º.\n"
            "/delete_capsule - –£–¥–∞–ª–∏—Ç—å –∫–∞–ø—Å—É–ª—É, –µ—Å–ª–∏ –æ–Ω–∞ –≤–∞–º –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞.\n"
            "/edit_capsule - –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–ø—Å—É–ª—ã (—Ç–µ–∫—Å—Ç).\n"
            "/view_recipients - –ü–æ–∫–∞–∑–∞—Ç—å, –∫—Ç–æ –ø–æ–ª—É—á–∏—Ç –≤–∞—à—É –∫–∞–ø—Å—É–ª—É.\n"
            "/select_send_date - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–ø—Å—É–ª—ã.\n"
            "*–ü—Ä–∏–º–µ—Ä:* –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å.\n"
            "/support_author - –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –±–æ—Ç–∞.\n"
            "/change_language - –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.\n\n"
        ),
        "change_language": "üåç –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
        "select_language": "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —è–∑—ã–∫:",
        "capsule_created": "‚úÖ –ö–∞–ø—Å—É–ª–∞ #{capsule_id} —Å–æ–∑–¥–∞–Ω–∞!\n–î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ—ë —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.",
        "enter_recipients": (
            "üë• –í–≤–µ–¥–∏—Ç–µ Telegram-–∏–º–µ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n"
            "*–ü—Ä–∏–º–µ—Ä:* @Friend1 @Friend2\n"
            "–û–Ω–∏ –ø–æ–ª—É—á–∞—Ç –∫–∞–ø—Å—É–ª—É, –∫–æ–≥–¥–∞ –≤—ã –µ—ë –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –∏–ª–∏ –Ω–∞—Å—Ç—É–ø–∏—Ç –∑–∞–¥–∞–Ω–Ω–∞—è –¥–∞—Ç–∞."
        ),
        "select_capsule": "üì¶ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–ø—Å—É–ª—ã –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è:",
        "invalid_capsule_id": (
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–∞–ø—Å—É–ª—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞–ø—Å—É–ª —Å –ø–æ–º–æ—â—å—é '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–ø—Å—É–ª—ã'."
        ),
        "recipients_added": (
            "‚úÖ –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–ø—Å—É–ª—É #{capsule_id}!\n"
            "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—ë —Å—Ä–∞–∑—É."
        ),
        "error_general": "‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        "service_unavailable": (
            "üõ† –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        ),
        "your_capsules": "üìã *–í–∞—à–∏ –∫–∞–ø—Å—É–ª—ã –≤—Ä–µ–º–µ–Ω–∏:*\n",
        "no_capsules": "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞–ø—Å—É–ª. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Å –ø–æ–º–æ—â—å—é '–°–æ–∑–¥–∞—Ç—å –∫–∞–ø—Å—É–ª—É'!",
        "created_at": "–°–æ–∑–¥–∞–Ω–æ",
        "status": "–°—Ç–∞—Ç—É—Å",
        "scheduled": "‚è≥ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ",
        "draft": "‚úèÔ∏è –ß–µ—Ä–Ω–æ–≤–∏–∫",
        "enter_capsule_id_to_send": "üì® –í–≤–µ–¥–∏—Ç–µ ID –∫–∞–ø—Å—É–ª—ã –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, #5):",
        "no_recipients": "‚ùå –í —ç—Ç–æ–π –∫–∞–ø—Å—É–ª–µ –Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é '–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è'.",
        "capsule_received": "üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –∫–∞–ø—Å—É–ª—É –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç @{sender}!\n–í–æ—Ç –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:",
        "capsule_sent": "üì¨ –ö–∞–ø—Å—É–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ @{recipient}!\n–û–Ω–∏ —É–≤–∏–¥—è—Ç –µ—ë –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.",
        "recipient_not_registered": (
            "‚ö†Ô∏è –ü–æ–ª—É—á–∞—Ç–µ–ª—å @{recipient} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ –∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç –∫–∞–ø—Å—É–ª—É."
        ),
        "confirm_delete": "üóë –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞–ø—Å—É–ª—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        "capsule_deleted": "‚úÖ –ö–∞–ø—Å—É–ª–∞ #{capsule_id} —É–¥–∞–ª–µ–Ω–∞.",
        "delete_canceled": "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ö–∞–ø—Å—É–ª–∞ –æ—Å—Ç–∞–ª–∞—Å—å –Ω–∞ –º–µ—Å—Ç–µ.",
        "enter_new_content": "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–ø—Å—É–ª—ã (—Å—Ç–∞—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–º–µ–Ω—ë–Ω):",
        "capsule_edited": "‚úÖ –ö–∞–ø—Å—É–ª–∞ #{capsule_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å –Ω–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º!",
        "recipients_list": "üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ –∫–∞–ø—Å—É–ª—ã #{capsule_id}:\n{recipients}",
        "no_recipients_for_capsule": "üì≠ –í –∫–∞–ø—Å—É–ª–µ #{capsule_id} –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π.",
        "choose_send_date": "üìÖ –ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–ø—Å—É–ª—É?\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
        "through_week": "–ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é",
        "through_month": "–ß–µ—Ä–µ–∑ –º–µ—Å—è—Ü",
        "select_date": "–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É",
        "date_selected": "üìÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {date}\n–ö–∞–ø—Å—É–ª–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.",
        "date_set": "‚úÖ –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–ø—Å—É–ª—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {date}. –û–∂–∏–¥–∞–π—Ç–µ!",
        "support_author": (
            "üíñ –ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –±–æ—Ç–∞:\n{url}\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞!"
        ),
        "create_capsule_first": (
            "üì¶ –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞–ø—Å—É–ª—É —Å –ø–æ–º–æ—â—å—é '–°–æ–∑–¥–∞—Ç—å –∫–∞–ø—Å—É–ª—É', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤ –Ω–µ—ë –∫–æ–Ω—Ç–µ–Ω—Ç."
        ),
        "text_added": "‚úÖ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–ø—Å—É–ª—É!",
        "photo_added": "‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–ø—Å—É–ª—É!",
        "video_added": "‚úÖ –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–ø—Å—É–ª—É!",
        "audio_added": "‚úÖ –ê—É–¥–∏–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–ø—Å—É–ª—É!",
        "document_added": "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–ø—Å—É–ª—É!",
        "sticker_added": "‚úÖ –°—Ç–∏–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–ø—Å—É–ª—É!",
        "voice_added": "‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–ø—Å—É–ª—É!",
        "not_registered": "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        "not_your_capsule": (
            "‚ùå –≠—Ç–∞ –∫–∞–ø—Å—É–ª–∞ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç. –í—ã –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ —Å–≤–æ–∏–º–∏ –∫–∞–ø—Å—É–ª–∞–º–∏."
        ),
        "today": "–°–µ–≥–æ–¥–Ω—è",
        "tomorrow": "–ó–∞–≤—Ç—Ä–∞",
        "content_limit_exceeded": "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç: –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ {type}.",
        "create_capsule_btn": "üì¶ –°–æ–∑–¥–∞—Ç—å –∫–∞–ø—Å—É–ª—É",
        "view_capsules_btn": "üìÇ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–ø—Å—É–ª—ã",
        "add_recipient_btn": "üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è",
        "send_capsule_btn": "üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–ø—Å—É–ª—É",
        "delete_capsule_btn": "üóë –£–¥–∞–ª–∏—Ç—å –∫–∞–ø—Å—É–ª—É",
        "edit_capsule_btn": "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ø—Å—É–ª—É",
        "view_recipients_btn": "üë• –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π",
        "help_btn": "‚ùì –ü–æ–º–æ—â—å",
        "select_send_date_btn": "üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏",
        "support_author_btn": "üí∏ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞",
        "change_language_btn": "üåç –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
    },
    'en': {
        "start_message": (
            "Welcome to TimeCapsuleBot! üì¨\n"
            "I‚Äôll help you create time capsules with text, photos, videos, and more "
            "to send to yourself or friends in the future.\n"
            "Use the buttons below to get started!"
        ),
        "help_message": (
            "üìã *TimeCapsuleBot Command List*\n\n"
            "/start - Launch the bot and open the main menu.\n"
            "/create_capsule - Create a new time capsule.\n*Example:* Add text, photos, or videos.\n"
            "/add_recipient - Add recipients to an existing capsule.\n*Example:* @Friend1 @Friend2\n"
            "/view_capsules - View a list of your capsules with their status.\n"
            "/send_capsule - Send a capsule to recipients immediately.\n"
            "/delete_capsule - Delete a capsule if you no longer need it.\n"
            "/edit_capsule - Edit the capsule‚Äôs content (text).\n"
            "/view_recipients - See who will receive your capsule.\n"
            "/select_send_date - Set a send date for the capsule.\n*Example:* In a week or a specific day.\n"
            "/support_author - Support the bot‚Äôs developer.\n"
            "/change_language - Change the interface language.\n\n"
        ),
        "change_language": "üåç Change Language",
        "select_language": "Select your language:",
        "capsule_created": "‚úÖ Capsule #{capsule_id} created!\nAdd text, photos, or videos to it.",
        "enter_recipients": (
            "üë• Enter Telegram usernames of recipients separated by spaces.\n"
            "*Example:* @Friend1 @Friend2\n"
            "They‚Äôll receive the capsule when you send it or the scheduled date arrives."
        ),
        "select_capsule": "üì¶ Enter the capsule number for the action:",
        "invalid_capsule_id": "‚ùå Invalid capsule ID. Check your capsule list with 'View Capsules'.",
        "recipients_added": (
            "‚úÖ Recipients added to capsule #{capsule_id}!\n"
            "Now you can set a send date or send it immediately."
        ),
        "error_general": "‚ö†Ô∏è Something went wrong. Try again or contact support.",
        "service_unavailable": "üõ† Service temporarily unavailable. Please wait and try again later.",
        "your_capsules": "üìã *Your Time Capsules:*\n",
        "no_capsules": "üì≠ You don‚Äôt have any capsules yet. Create your first one with 'Create Capsule'!",
        "created_at": "Created",
        "status": "Status",
        "scheduled": "‚è≥ Scheduled",
        "draft": "‚úèÔ∏è Draft",
        "enter_capsule_id_to_send": "üì® Enter the capsule ID to send immediately (e.g., #5):",
        "no_recipients": "‚ùå This capsule has no recipients. Add them with 'Add Recipient'.",
        "capsule_received": "üéâ You‚Äôve received a time capsule from @{sender}!\nHere‚Äôs its content:",
        "capsule_sent": "üì¨ Capsule successfully sent to @{recipient}!\nThey‚Äôll see it now.",
        "recipient_not_registered": (
            "‚ö†Ô∏è Recipient @{recipient} isn‚Äôt registered with the bot and won‚Äôt receive the capsule."
        ),
        "confirm_delete": "üóë Are you sure you want to delete this capsule? This action cannot be undone.",
        "capsule_deleted": "‚úÖ Capsule #{capsule_id} deleted.",
        "delete_canceled": "‚ùå Deletion canceled. The capsule remains intact.",
        "enter_new_content": "‚úèÔ∏è Enter new text for the capsule (old content will be replaced):",
        "capsule_edited": "‚úÖ Capsule #{capsule_id} updated with new content!",
        "recipients_list": "üë• Recipients of capsule #{capsule_id}:\n{recipients}",
        "no_recipients_for_capsule": "üì≠ No recipients found for capsule #{capsule_id}.",
        "choose_send_date": "üìÖ When should the capsule be sent?\nChoose an option:",
        "through_week": "In a week",
        "through_month": "In a month",
        "select_date": "Select a date",
        "date_selected": "üìÖ You‚Äôve selected: {date}\nThe capsule will be sent at this time.",
        "date_set": "‚úÖ Capsule send date set to {date}. Stay tuned!",
        "support_author": (
            "üíñ Support the bot‚Äôs author:\n{url}\n"
            "Thanks for helping the project grow!"
        ),
        "create_capsule_first": "üì¶ First, create a capsule with 'Create Capsule' to add content.",
        "text_added": "‚úÖ Text message added to the capsule!",
        "photo_added": "‚úÖ Photo added to the capsule!",
        "video_added": "‚úÖ Video added to the capsule!",
        "audio_added": "‚úÖ Audio added to the capsule!",
        "document_added": "‚úÖ Document added to the capsule!",
        "sticker_added": "‚úÖ Sticker added to the capsule!",
        "voice_added": "‚úÖ Voice message added to the capsule!",
        "not_registered": "‚ö†Ô∏è You‚Äôre not registered with the bot. Press /start to begin.",
        "not_your_capsule": "‚ùå This capsule doesn‚Äôt belong to you. You can only manage your own capsules.",
        "today": "Today",
        "tomorrow": "Tomorrow",
        "content_limit_exceeded": "‚ö†Ô∏è Limit exceeded: you‚Äôve added too many {type}.",
        "create_capsule_btn": "üì¶ Create Capsule",
        "view_capsules_btn": "üìÇ View Capsules",
        "add_recipient_btn": "üë§ Add Recipient",
        "send_capsule_btn": "üì® Send Capsule",
        "delete_capsule_btn": "üóë Delete Capsule",
        "edit_capsule_btn": "‚úèÔ∏è Edit Capsule",
        "view_recipients_btn": "üë• View Recipients",
        "help_btn": "‚ùì Help",
        "select_send_date_btn": "üìÖ Set Send Date",
        "support_author_btn": "üí∏ Support Author",
        "change_language_btn": "üåç Change Language",
    },
    'es': {
        "start_message": (
            "¬°Bienvenido a TimeCapsuleBot! üì¨\n"
            "Te ayudar√© a crear c√°psulas del tiempo con texto, fotos, videos y m√°s "
            "para enviarlas a ti mismo o a tus amigos en el futuro.\n"
            "¬°Usa los botones de abajo para comenzar!"
        ),
        "help_message": (
            "üìã *Lista de comandos de TimeCapsuleBot*\n\n"
            "/start - Inicia el bot y abre el men√∫ principal.\n"
            "/create_capsule - Crea una nueva c√°psula del tiempo.\n*Ejemplo:* Agrega texto, fotos o videos.\n"
            "/add_recipient - Agrega destinatarios a una c√°psula existente.\n*Ejemplo:* @Friend1 @Friend2\n"
            "/view_capsules - Ver una lista de tus c√°psulas con su estado.\n"
            "/send_capsule - Env√≠a una c√°psula a los destinatarios inmediatamente.\n"
            "/delete_capsule - Elimina una c√°psula si ya no la necesitas.\n"
            "/edit_capsule - Edita el contenido de la c√°psula (texto).\n"
            "/view_recipients - Ver qui√©n recibir√° tu c√°psula.\n"
            "/select_send_date - Establece una fecha de env√≠o para la c√°psula.\n"
            "*Ejemplo:* En una semana o un d√≠a espec√≠fico.\n"
            "/support_author - Apoya al desarrollador del bot.\n"
            "/change_language - Cambia el idioma de la interfaz.\n\n"
        ),
        "change_language": "üåç Cambiar idioma",
        "select_language": "Selecciona tu idioma:",
        "capsule_created": "‚úÖ ¬°C√°psula #{capsule_id} creada!\nAgrega texto, fotos o videos a ella.",
        "enter_recipients": (
            "üë• Ingresa los nombres de usuario de Telegram de los destinatarios separados por espacios.\n"
            "*Ejemplo:* @Friend1 @Friend2\n"
            "Ellos recibir√°n la c√°psula cuando la env√≠es o llegue la fecha programada."
        ),
        "select_capsule": "üì¶ Ingresa el n√∫mero de la c√°psula para la acci√≥n:",
        "invalid_capsule_id": "‚ùå ID de c√°psula inv√°lido. Verifica tu lista de c√°psulas con 'Ver c√°psulas'.",
        "recipients_added": (
            "‚úÖ ¬°Destinatarios agregados a la c√°psula #{capsule_id}!\n"
            "Ahora puedes establecer una fecha de env√≠o o enviarla inmediatamente."
        ),
        "error_general": "‚ö†Ô∏è Algo sali√≥ mal. Int√©ntalo de nuevo o contacta con soporte.",
        "service_unavailable": (
            "üõ† El servicio no est√° disponible temporalmente. Por favor, espera e int√©ntalo de nuevo m√°s tarde."
        ),
        "your_capsules": "üìã *Tus c√°psulas del tiempo:*\n",
        "no_capsules": "üì≠ Todav√≠a no tienes c√°psulas. ¬°Crea tu primera con 'Crear c√°psula'!",
        "created_at": "Creado",
        "status": "Estado",
        "scheduled": "‚è≥ Programado",
        "draft": "‚úèÔ∏è Borrador",
        "enter_capsule_id_to_send": "üì® Ingresa el ID de la c√°psula para enviar inmediatamente (por ejemplo, #5):",
        "no_recipients": "‚ùå Esta c√°psula no tiene destinatarios. Agrega algunos con 'Agregar destinatario'.",
        "capsule_received": "üéâ ¬°Has recibido una c√°psula del tiempo de @{sender}!\nAqu√≠ est√° su contenido:",
        "capsule_sent": "üì¨ ¬°C√°psula enviada exitosamente a @{recipient}!\nLa ver√°n ahora.",
        "recipient_not_registered": (
            "‚ö†Ô∏è El destinatario @{recipient} no est√° registrado en el bot y no recibir√° la c√°psula."
        ),
        "confirm_delete": "üóë ¬øEst√°s seguro de que quieres eliminar esta c√°psula? Esta acci√≥n no se puede deshacer.",
        "capsule_deleted": "‚úÖ C√°psula #{capsule_id} eliminada.",
        "delete_canceled": "‚ùå Eliminaci√≥n cancelada. La c√°psula permanece intacta.",
        "enter_new_content": "‚úèÔ∏è Ingresa el nuevo texto para la c√°psula (el contenido antiguo ser√° reemplazado):",
        "capsule_edited": "‚úÖ ¬°C√°psula #{capsule_id} actualizada con nuevo contenido!",
        "recipients_list": "üë• Destinatarios de la c√°psula #{capsule_id}:\n{recipients}",
        "no_recipients_for_capsule": "üì≠ No se encontraron destinatarios para la c√°psula #{capsule_id}.",
        "choose_send_date": "üìÖ ¬øCu√°ndo enviar la c√°psula?\nElige una opci√≥n:",
        "through_week": "En una semana",
        "through_month": "En un mes",
        "select_date": "Seleccionar fecha",
        "date_selected": "üìÖ Has seleccionado: {date}\nLa c√°psula ser√° enviada en ese momento.",
        "date_set": "‚úÖ Fecha de env√≠o de la c√°psula establecida para {date}. ¬°Mantente atento!",
        "support_author": (
            "üíñ Apoya al autor del bot:\n{url}\n"
            "¬°Gracias por ayudar a que el proyecto crezca!"
        ),
        "create_capsule_first": "üì¶ Primero, crea una c√°psula con 'Crear c√°psula' para agregar contenido.",
        "text_added": "‚úÖ ¬°Mensaje de texto agregado a la c√°psula!",
        "photo_added": "‚úÖ ¬°Foto agregada a la c√°psula!",
        "video_added": "‚úÖ ¬°Video agregado a la c√°psula!",
        "audio_added": "‚úÖ ¬°Audio agregado a la c√°psula!",
        "document_added": "‚úÖ ¬°Documento agregado a la c√°psula!",
        "sticker_added": "‚úÖ ¬°Sticker agregado a la c√°psula!",
        "voice_added": "‚úÖ ¬°Mensaje de voz agregado a la c√°psula!",
        "not_registered": "‚ö†Ô∏è No est√°s registrado en el bot. Presiona /start para comenzar.",
        "not_your_capsule": "‚ùå Esta c√°psula no te pertenece. Solo puedes gestionar tus propias c√°psulas.",
        "today": "Hoy",
        "tomorrow": "Ma√±ana",
        "content_limit_exceeded": "‚ö†Ô∏è L√≠mite excedido: has agregado demasiados {type}.",
        "create_capsule_btn": "üì¶ Crear C√°psula",
        "view_capsules_btn": "üìÇ Ver C√°psulas",
        "add_recipient_btn": "üë§ Agregar Destinatario",
        "send_capsule_btn": "üì® Enviar C√°psula",
        "delete_capsule_btn": "üóë Eliminar C√°psula",
        "edit_capsule_btn": "‚úèÔ∏è Editar C√°psula",
        "view_recipients_btn": "üë• Ver Destinatarios",
        "help_btn": "‚ùì Ayuda",
        "select_send_date_btn": "üìÖ Establecer Fecha de Env√≠o",
        "support_author_btn": "üí∏ Apoyar al Autor",
        "change_language_btn": "üåç Cambiar Idioma",
    },
    'fr': {
        "start_message": (
            "Bienvenue sur TimeCapsuleBot ! üì¨\n"
            "Je vais vous aider √† cr√©er des capsules temporelles avec du texte, des photos, des vid√©os "
            "et plus encore pour les envoyer √† vous-m√™me ou √† vos amis dans le futur.\n"
            "Utilisez les boutons ci-dessous pour commencer !"
        ),
        "help_message": (
            "üìã *Liste des commandes de TimeCapsuleBot*\n\n"
            "/start - Lancez le bot et ouvrez le menu principal.\n"
            "/create_capsule - Cr√©ez une nouvelle capsule temporelle.\n*Exemple:* Ajoutez du texte, des photos ou des vid√©os.\n"
            "/add_recipient - Ajoutez des destinataires √† une capsule existante.\n*Exemple:* @Friend1 @Friend2\n"
            "/view_capsules - Affichez une liste de vos capsules avec leur statut.\n"
            "/send_capsule - Envoyez une capsule aux destinataires imm√©diatement.\n"
            "/delete_capsule - Supprimez une capsule si vous n'en avez plus besoin.\n"
            "/edit_capsule - Modifiez le contenu de la capsule (texte).\n"
            "/view_recipients - Voyez qui recevra votre capsule.\n"
            "/select_send_date - D√©finissez une date d'envoi pour la capsule.\n*Exemple:* Dans une semaine ou un jour sp√©cifique.\n"
            "/support_author - Soutenez le d√©veloppeur du bot.\n"
            "/change_language - Changez la langue de l'interface.\n\n"
        ),
        "change_language": "üåç Changer de langue",
        "select_language": "S√©lectionnez votre langue :",
        "capsule_created": "‚úÖ Capsule #{capsule_id} cr√©√©e !\nAjoutez-y du texte, des photos ou des vid√©os.",
        "enter_recipients": (
            "üë• Entrez les noms d'utilisateur Telegram des destinataires s√©par√©s par des espaces.\n"
            "*Exemple:* @Friend1 @Friend2\n"
            "Ils recevront la capsule lorsque vous l'enverrez ou √† la date programm√©e."
        ),
        "select_capsule": "üì¶ Entrez le num√©ro de la capsule pour l'action :",
        "invalid_capsule_id": "‚ùå ID de capsule invalide. V√©rifiez votre liste de capsules avec 'Voir les capsules'.",
        "recipients_added": (
            "‚úÖ Destinataires ajout√©s √† la capsule #{capsule_id} !\n"
            "Vous pouvez maintenant d√©finir une date d'envoi ou l'envoyer imm√©diatement."
        ),
        "error_general": "‚ö†Ô∏è Quelque chose s'est mal pass√©. R√©essayez ou contactez le support.",
        "service_unavailable": (
            "üõ† Le service est temporairement indisponible. Veuillez patienter et r√©essayer plus tard."
        ),
        "your_capsules": "üìã *Vos capsules temporelles :*\n",
        "no_capsules": "üì≠ Vous n'avez pas encore de capsules. Cr√©ez votre premi√®re avec 'Cr√©er une capsule' !",
        "created_at": "Cr√©√©",
        "status": "Statut",
        "scheduled": "‚è≥ Programm√©",
        "draft": "‚úèÔ∏è Brouillon",
        "enter_capsule_id_to_send": "üì® Entrez l'ID de la capsule √† envoyer imm√©diatement (par exemple, #5) :",
        "no_recipients": "‚ùå Cette capsule n'a pas de destinataires. Ajoutez-en avec 'Ajouter un destinataire'.",
        "capsule_received": "üéâ Vous avez re√ßu une capsule temporelle de @{sender} !\nVoici son contenu :",
        "capsule_sent": "üì¨ Capsule envoy√©e avec succ√®s √† @{recipient} !\nIls la verront maintenant.",
        "recipient_not_registered": (
            "‚ö†Ô∏è Le destinataire @{recipient} n'est pas enregistr√© avec le bot et ne recevra pas la capsule."
        ),
        "confirm_delete": "üóë √ätes-vous s√ªr de vouloir supprimer cette capsule ? Cette action est irr√©versible.",
        "capsule_deleted": "‚úÖ Capsule #{capsule_id} supprim√©e.",
        "delete_canceled": "‚ùå Suppression annul√©e. La capsule reste intacte.",
        "enter_new_content": "‚úèÔ∏è Entrez le nouveau texte pour la capsule (l'ancien contenu sera remplac√©) :",
        "capsule_edited": "‚úÖ Capsule #{capsule_id} mise √† jour avec le nouveau contenu !",
        "recipients_list": "üë• Destinataires de la capsule #{capsule_id} :\n{recipients}",
        "no_recipients_for_capsule": "üì≠ Aucun destinataire trouv√© pour la capsule #{capsule_id}.",
        "choose_send_date": "üìÖ Quand envoyer la capsule ?\nChoisissez une option :",
        "through_week": "Dans une semaine",
        "through_month": "Dans un mois",
        "select_date": "S√©lectionner une date",
        "date_selected": "üìÖ Vous avez s√©lectionn√© : {date}\nLa capsule sera envoy√©e √† ce moment-l√†.",
        "date_set": "‚úÖ Date d'envoi de la capsule d√©finie sur {date}. Restez √† l'√©coute !",
        "support_author": (
            "üíñ Soutenez l'auteur du bot :\n{url}\n"
            "Merci de contribuer √† la croissance du projet !"
        ),
        "create_capsule_first": "üì¶ Cr√©ez d'abord une capsule avec 'Cr√©er une capsule' pour ajouter du contenu.",
        "text_added": "‚úÖ Message texte ajout√© √† la capsule !",
        "photo_added": "‚úÖ Photo ajout√©e √† la capsule !",
        "video_added": "‚úÖ Vid√©o ajout√©e √† la capsule !",
        "audio_added": "‚úÖ Audio ajout√© √† la capsule !",
        "document_added": "‚úÖ Document ajout√© √† la capsule !",
        "sticker_added": "‚úÖ Sticker ajout√© √† la capsule !",
        "voice_added": "‚úÖ Message vocal ajout√© √† la capsule !",
        "not_registered": "‚ö†Ô∏è Vous n'√™tes pas enregistr√© avec le bot. Appuyez sur /start pour commencer.",
        "not_your_capsule": "‚ùå Cette capsule ne vous appartient pas. Vous ne pouvez g√©rer que vos propres capsules.",
        "today": "Aujourd'hui",
        "tomorrow": "Demain",
        "content_limit_exceeded": "‚ö†Ô∏è Limite d√©pass√©e : vous avez ajout√© trop de {type}.",
        "create_capsule_btn": "üì¶ Cr√©er une Capsule",
        "view_capsules_btn": "üìÇ Voir les Capsules",
        "add_recipient_btn": "üë§ Ajouter un Destinataire",
        "send_capsule_btn": "üì® Envoyer la Capsule",
        "delete_capsule_btn": "üóë Supprimer la Capsule",
        "edit_capsule_btn": "‚úèÔ∏è Modifier la Capsule",
        "view_recipients_btn": "üë• Voir les Destinataires",
        "help_btn": "‚ùì Aide",
        "select_send_date_btn": "üìÖ D√©finir la Date d'Envoi",
        "support_author_btn": "üí∏ Soutenir l'Auteur",
        "change_language_btn": "üåç Changer de Langue",
    },
    'de': {
        "start_message": (
            "Willkommen bei TimeCapsuleBot! üì¨\n"
            "Ich helfe Ihnen, Zeitkapseln mit Text, Fotos, Videos und mehr zu erstellen, "
            "die Sie sich selbst oder Freunden in der Zukunft senden k√∂nnen.\n"
            "Verwenden Sie die Schaltfl√§chen unten, um loszulegen!"
        ),
        "help_message": (
            "üìã *TimeCapsuleBot-Befehlsliste*\n\n"
            "/start - Starten Sie den Bot und √∂ffnen Sie das Hauptmen√º.\n"
            "/create_capsule - Erstellen Sie eine neue Zeitkapsel.\n*Beispiel:* F√ºgen Sie Text, Fotos oder Videos hinzu.\n"
            "/add_recipient - F√ºgen Sie Empf√§nger zu einer vorhandenen Kapsel hinzu.\n*Beispiel:* @Friend1 @Friend2\n"
            "/view_capsules - Zeigen Sie eine Liste Ihrer Kapseln mit deren Status an.\n"
            "/send_capsule - Senden Sie eine Kapsel sofort an die Empf√§nger.\n"
            "/delete_capsule - L√∂schen Sie eine Kapsel, wenn Sie sie nicht mehr ben√∂tigen.\n"
            "/edit_capsule - Bearbeiten Sie den Inhalt der Kapsel (Text).\n"
            "/view_recipients - Sehen Sie, wer Ihre Kapsel erh√§lt.\n"
            "/select_send_date - Legen Sie ein Sendedatum f√ºr die Kapsel fest.\n*Beispiel:* In einer Woche oder an einem bestimmten Tag.\n"
            "/support_author - Unterst√ºtzen Sie den Entwickler des Bots.\n"
            "/change_language - √Ñndern Sie die Sprache der Benutzeroberfl√§che.\n\n"
        ),
        "change_language": "üåç Sprache √§ndern",
        "select_language": "W√§hlen Sie Ihre Sprache:",
        "capsule_created": "‚úÖ Kapsel #{capsule_id} erstellt!\nF√ºgen Sie Text, Fotos oder Videos hinzu.",
        "enter_recipients": (
            "üë• Geben Sie die Telegram-Benutzernamen der Empf√§nger getrennt durch Leerzeichen ein.\n"
            "*Beispiel:* @Friend1 @Friend2\n"
            "Sie erhalten die Kapsel, wenn Sie sie senden oder das geplante Datum erreicht ist."
        ),
        "select_capsule": "üì¶ Geben Sie die Kapselnummer f√ºr die Aktion ein:",
        "invalid_capsule_id": "‚ùå Ung√ºltige Kapsel-ID. √úberpr√ºfen Sie Ihre Kapselliste mit 'Kapseln anzeigen'.",
        "recipients_added": (
            "‚úÖ Empf√§nger zur Kapsel #{capsule_id} hinzugef√ºgt!\n"
            "Sie k√∂nnen jetzt ein Sendedatum festlegen oder sie sofort senden."
        ),
        "error_general": "‚ö†Ô∏è Etwas ist schief gelaufen. Versuchen Sie es erneut oder kontaktieren Sie den Support.",
        "service_unavailable": (
            "üõ† Der Dienst ist vor√ºbergehend nicht verf√ºgbar. Bitte warten Sie und versuchen Sie es sp√§ter erneut."
        ),
        "your_capsules": "üìã *Ihre Zeitkapseln:*\n",
        "no_capsules": "üì≠ Sie haben noch keine Kapseln. Erstellen Sie Ihre erste mit 'Kapsel erstellen'!",
        "created_at": "Erstellt",
        "status": "Status",
        "scheduled": "‚è≥ Geplant",
        "draft": "‚úèÔ∏è Entwurf",
        "enter_capsule_id_to_send": "üì® Geben Sie die Kapsel-ID zum sofortigen Senden ein (z. B. #5):",
        "no_recipients": "‚ùå Diese Kapsel hat keine Empf√§nger. F√ºgen Sie welche mit 'Empf√§nger hinzuf√ºgen' hinzu.",
        "capsule_received": "üéâ Sie haben eine Zeitkapsel von @{sender} erhalten!\nHier ist ihr Inhalt:",
        "capsule_sent": "üì¨ Kapsel erfolgreich an @{recipient} gesendet!\nSie sehen sie jetzt.",
        "recipient_not_registered": (
            "‚ö†Ô∏è Der Empf√§nger @{recipient} ist nicht beim Bot registriert und erh√§lt die Kapsel nicht."
        ),
        "confirm_delete": (
            "üóë Sind Sie sicher, dass Sie diese Kapsel l√∂schen m√∂chten? Diese Aktion kann nicht r√ºckg√§ngig gemacht werden."
        ),
        "capsule_deleted": "‚úÖ Kapsel #{capsule_id} gel√∂scht.",
        "delete_canceled": "‚ùå L√∂schen abgebrochen. Die Kapsel bleibt unversehrt.",
        "enter_new_content": "‚úèÔ∏è Geben Sie den neuen Text f√ºr die Kapsel ein (der alte Inhalt wird ersetzt):",
        "capsule_edited": "‚úÖ Kapsel #{capsule_id} mit neuem Inhalt aktualisiert!",
        "recipients_list": "üë• Empf√§nger der Kapsel #{capsule_id}:\n{recipients}",
        "no_recipients_for_capsule": "üì≠ Keine Empf√§nger f√ºr Kapsel #{capsule_id} gefunden.",
        "choose_send_date": "üìÖ Wann soll die Kapsel gesendet werden?\nW√§hlen Sie eine Option:",
        "through_week": "In einer Woche",
        "through_month": "In einem Monat",
        "select_date": "Datum ausw√§hlen",
        "date_selected": "üìÖ Sie haben ausgew√§hlt: {date}\nDie Kapsel wird zu diesem Zeitpunkt gesendet.",
        "date_set": "‚úÖ Sendedatum der Kapsel auf {date} festgelegt. Bleiben Sie dran!",
        "support_author": (
            "üíñ Unterst√ºtzen Sie den Autor des Bots:\n{url}\n"
            "Vielen Dank f√ºr Ihre Unterst√ºtzung beim Wachstum des Projekts!"
        ),
        "create_capsule_first": (
            "üì¶ Erstellen Sie zuerst eine Kapsel mit 'Kapsel erstellen', um Inhalte hinzuzuf√ºgen."
        ),
        "text_added": "‚úÖ Textnachricht zur Kapsel hinzugef√ºgt!",
        "photo_added": "‚úÖ Foto zur Kapsel hinzugef√ºgt!",
        "video_added": "‚úÖ Video zur Kapsel hinzugef√ºgt!",
        "audio_added": "‚úÖ Audio zur Kapsel hinzugef√ºgt!",
        "document_added": "‚úÖ Dokument zur Kapsel hinzugef√ºgt!",
        "sticker_added": "‚úÖ Sticker zur Kapsel hinzugef√ºgt!",
        "voice_added": "‚úÖ Sprachnachricht zur Kapsel hinzugef√ºgt!",
        "not_registered": "‚ö†Ô∏è Sie sind nicht beim Bot registriert. Dr√ºcken Sie /start, um zu beginnen.",
        "not_your_capsule": "‚ùå Diese Kapsel geh√∂rt Ihnen nicht. Sie k√∂nnen nur Ihre eigenen Kapseln verwalten.",
        "today": "Heute",
        "tomorrow": "Morgen",
        "content_limit_exceeded": "‚ö†Ô∏è Limit √ºberschritten: Sie haben zu viele {type} hinzugef√ºgt.",
        "create_capsule_btn": "üì¶ Kapsel Erstellen",
        "view_capsules_btn": "üìÇ Kapseln Anzeigen",
        "add_recipient_btn": "üë§ Empf√§nger Hinzuf√ºgen",
        "send_capsule_btn": "üì® Kapsel Senden",
        "delete_capsule_btn": "üóë Kapsel L√∂schen",
        "edit_capsule_btn": "‚úèÔ∏è Kapsel Bearbeiten",
        "view_recipients_btn": "üë• Empf√§nger Anzeigen",
        "help_btn": "‚ùì Hilfe",
        "select_send_date_btn": "üìÖ Sendedatum Festlegen",
        "support_author_btn": "üí∏ Autor Unterst√ºtzen",
        "change_language_btn": "üåç Sprache √Ñndern",
    }
}

def t(key: str, **kwargs) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ –∫–ª—é—á—É —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞–ª–∏."""
    translation = TRANSLATIONS.get(LOCALE, TRANSLATIONS['en']).get(key, key)
    return translation.format(**kwargs) if kwargs else translation

# –§—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
def start_process(command: str, name: str) -> bool:
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    try:
        process = subprocess.Popen(
            command,
            shell=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        logger.info(f"{name} –∑–∞–ø—É—â–µ–Ω —Å PID: {process.pid}")
        time.sleep(2)
        if process.poll() is None:
            logger.info(f"{name} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")
            return True
        else:
            error = process.stderr.read().decode()
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {name}: {error}")
            return False
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å {name}: {e}")
        return False

def start_services():
    """–ó–∞–ø—É—Å–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."""
    redis_url = os.getenv("REDIS_URL")
    if not redis_url:
        logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è REDIS_URL –Ω–µ –∑–∞–¥–∞–Ω–∞.")
        sys.exit(1)
    celery_command = "celery -A celery_config.app worker --loglevel=info --pool=solo"
    if not start_process(celery_command, "Celery"):
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Celery.")
        sys.exit(1)

# –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
def encrypt_data_aes(data: str, key: bytes) -> str:
    """–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é AES."""
    iv = os.urandom(16)
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    padder = padding.PKCS7(128).padder()
    padded_data = padder.update(data.encode('utf-8')) + padder.finalize()
    encryptor = cipher.encryptor()
    encrypted = encryptor.update(padded_data) + encryptor.finalize()
    return (iv + encrypted).hex()

def decrypt_data_aes(encrypted_hex: str, key: bytes) -> str:
    """–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é AES."""
    data = bytes.fromhex(encrypted_hex)
    iv, encrypted = data[:16], data[16:]
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    decryptor = cipher.decryptor()
    decrypted = decryptor.update(encrypted) + decryptor.finalize()
    unpadder = padding.PKCS7(128).unpadder()
    unpadded = unpadder.update(decrypted) + unpadder.finalize()
    return unpadded.decode('utf-8')

# –†–∞–±–æ—Ç–∞ —Å Supabase
def fetch_data(table: str, query: dict = {}) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase."""
    try:
        response = supabase.table(table).select("*")
        for key, value in query.items():
            response = response.eq(key, value)
        return response.execute().data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Supabase: {e}")
        return []

def post_data(table: str, data: dict) -> list:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Supabase."""
    try:
        return supabase.table(table).insert(data).execute().data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Supabase: {e}")
        return []

def update_data(table: str, query: dict, data: dict) -> list:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Supabase."""
    try:
        query_builder = supabase.table(table).update(data)
        for key, value in query.items():
            query_builder = query_builder.eq(key, value)
        return query_builder.execute().data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ Supabase: {e}")
        return []

def delete_data(table: str, query: dict) -> list:
    """–£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase."""
    try:
        return (
            supabase.table(table)
            .delete()
            .eq(next(iter(query)), query[next(iter(query))])
            .execute()
            .data
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤ Supabase: {e}")
        return []

def get_chat_id(username: str) -> Optional[int]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ chat_id –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    response = fetch_data("users", {"username": username})
    return response[0]['chat_id'] if response else None

def add_user(username: str, telegram_id: int, chat_id: int):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    if not fetch_data("users", {"telegram_id": telegram_id}):
        post_data("users", {
            "telegram_id": telegram_id,
            "username": username,
            "chat_id": chat_id
        })

def generate_unique_capsule_number(creator_id: int) -> int:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–∞–ø—Å—É–ª—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return len(fetch_data("capsules", {"creator_id": creator_id})) + 1

def create_capsule(
    creator_id: int,
    title: str,
    content: str,
    user_capsule_number: int,
    scheduled_at: Optional[datetime] = None
) -> int:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞–ø—Å—É–ª—ã."""
    encrypted_content = encrypt_data_aes(content, ENCRYPTION_KEY_BYTES)
    data = {
        "creator_id": creator_id,
        "title": title,
        "content": encrypted_content,
        "user_capsule_number": user_capsule_number
    }
    if scheduled_at:
        data["scheduled_at"] = scheduled_at.astimezone(pytz.utc).isoformat()
    response = post_data("capsules", data)
    return response[0]['id'] if response else -1

def add_recipient(capsule_id: int, recipient_username: str):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∫ –∫–∞–ø—Å—É–ª–µ."""
    post_data("recipients", {
        "capsule_id": capsule_id,
        "recipient_username": recipient_username
    })

def delete_capsule(capsule_id: int):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–ø—Å—É–ª—ã –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    delete_data("recipients", {"capsule_id": capsule_id})
    delete_data("capsules", {"id": capsule_id})

def edit_capsule(
    capsule_id: int,
    title: Optional[str] = None,
    content: Optional[str] = None,
    scheduled_at: Optional[datetime] = None
):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–ø—Å—É–ª—ã."""
    data = {}
    if title:
        data["title"] = title
    if content:
        data["content"] = encrypt_data_aes(content, ENCRYPTION_KEY_BYTES)
    if scheduled_at:
        data["scheduled_at"] = scheduled_at.astimezone(pytz.utc).isoformat()
    if data:
        update_data("capsules", {"id": capsule_id}, data)

def get_user_capsules(telegram_id: int) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–ø—Å—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = fetch_data("users", {"telegram_id": telegram_id})
    return fetch_data("capsules", {"creator_id": user[0]['id']}) if user else []

def get_capsule_recipients(capsule_id: int) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∫–∞–ø—Å—É–ª—ã."""
    return fetch_data("recipients", {"capsule_id": capsule_id})

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.message.from_user
    add_user(user.username or str(user.id), user.id, update.message.chat_id)
    keyboard = [
        [t("create_capsule_btn"), t("view_capsules_btn")],
        [t("add_recipient_btn"), t("send_capsule_btn")],
        [t("delete_capsule_btn"), t("edit_capsule_btn")],
        [t("view_recipients_btn"), t("help_btn")],
        [t("select_send_date_btn"), t("support_author_btn")],
        [t("change_language_btn")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(t('start_message'), reply_markup=reply_markup)

async def help_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    keyboard = [
        [t("create_capsule_btn"), t("view_capsules_btn")],
        [t("add_recipient_btn"), t("send_capsule_btn")],
        [t("delete_capsule_btn"), t("edit_capsule_btn")],
        [t("view_recipients_btn"), t("help_btn")],
        [t("select_send_date_btn"), t("support_author_btn")],
        [t("change_language_btn")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(t('help_message'), reply_markup=reply_markup)

async def create_capsule_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /create_capsule."""
    try:
        user = update.message.from_user
        existing_user = fetch_data("users", {"telegram_id": user.id})
        if not existing_user:
            response = post_data("users", {
                "telegram_id": user.id,
                "username": user.username or str(user.id),
                "chat_id": update.message.chat_id
            })
            creator_id = response[0]['id']
        else:
            creator_id = existing_user[0]['id']
        initial_content = json.dumps({
            "text": [],
            "photos": [],
            "videos": [],
            "audios": [],
            "documents": [],
            "stickers": [],
            "voices": []
        }, ensure_ascii=False)
        user_capsule_number = generate_unique_capsule_number(creator_id)
        capsule_id = create_capsule(creator_id, "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è", initial_content, user_capsule_number)
        if capsule_id == -1:
            await update.message.reply_text(t('service_unavailable'))
            return
        context.user_data['current_capsule'] = capsule_id
        context.user_data['capsule_content'] = json.loads(initial_content)
        context.user_data['state'] = CREATING_CAPSULE
        await update.message.reply_text(t('capsule_created', capsule_id=capsule_id))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–ø—Å—É–ª—ã: {e}")
        await update.message.reply_text(t('error_general'))

async def show_capsule_selection(update: Update, context: CallbackContext, action: str) -> bool:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –∫–∞–ø—Å—É–ª—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è."""
    await update.message.reply_text(t('select_capsule'))
    context.user_data['action'] = action
    return True

async def add_recipient_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_recipient."""
    if await show_capsule_selection(update, context, "add_recipient"):
        context.user_data['state'] = SELECTING_CAPSULE_FOR_RECIPIENTS

async def view_capsules_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /view_capsules."""
    try:
        capsules = get_user_capsules(update.message.from_user.id)
        if capsules:
            response = [
                f"üì¶ #{c['id']} {c['title']}\n"
                f"üïí {t('created_at')}: {datetime.fromisoformat(c['created_at']).strftime('%d.%m.%Y %H:%M')}\n"
                f"üîí {t('status')}: {t('scheduled') if c['scheduled_at'] else t('draft')}"
                for c in capsules
            ]
            await update.message.reply_text(
                t('your_capsules') + "\n" + "\n".join(response),
                parse_mode="Markdown"
            )
        else:
            await update.message.reply_text(t('no_capsules'))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–ø—Å—É–ª: {e}")
        await update.message.reply_text(t('error_general'))

async def send_capsule_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /send_capsule."""
    if await show_capsule_selection(update, context, "send_capsule"):
        context.user_data['state'] = "sending_capsule"

async def delete_capsule_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete_capsule."""
    if await show_capsule_selection(update, context, "delete_capsule"):
        context.user_data['state'] = "deleting_capsule"

async def edit_capsule_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /edit_capsule."""
    if await show_capsule_selection(update, context, "edit_capsule"):
        context.user_data['state'] = "editing_capsule"

async def view_recipients_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /view_recipients."""
    if await show_capsule_selection(update, context, "view_recipients"):
        context.user_data['state'] = "viewing_recipients"

async def select_send_date(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /select_send_date."""
    if await show_capsule_selection(update, context, "select_send_date"):
        context.user_data['state'] = SELECTING_CAPSULE

async def support_author(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /support_author."""
    DONATION_URL = "https://www.donationalerts.com/r/lunarisqqq"
    await update.message.reply_text(t('support_author', url=DONATION_URL))

async def change_language(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /change_language."""
    keyboard = [
        [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data="ru"),
         InlineKeyboardButton("English", callback_data="en")],
        [InlineKeyboardButton("Espa√±ol", callback_data="es"),
         InlineKeyboardButton("Fran√ßais", callback_data="fr")],
        [InlineKeyboardButton("Deutsch", callback_data="de")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(t('select_language'), reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
async def handle_language_selection(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞."""
    global LOCALE
    query = update.callback_query
    lang = query.data
    LOCALE = lang
    lang_names = {
        'ru': "–†—É—Å—Å–∫–∏–π",
        'en': "English",
        'es': "Espa√±ol",
        'fr': "Fran√ßais",
        'de': "Deutsch"
    }
    new_lang = lang_names.get(lang, "Unknown")
    await query.edit_message_text(f"–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_lang}.")
    keyboard = [
        [t("create_capsule_btn"), t("view_capsules_btn")],
        [t("add_recipient_btn"), t("send_capsule_btn")],
        [t("delete_capsule_btn"), t("edit_capsule_btn")],
        [t("view_recipients_btn"), t("help_btn")],
        [t("select_send_date_btn"), t("support_author_btn")],
        [t("change_language_btn")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=t('start_message'),
        reply_markup=reply_markup
    )

async def handle_capsule_selection(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞–ø—Å—É–ª—ã."""
    text = update.message.text.strip()
    try:
        capsule_id = int(text.replace('#', ''))
        context.user_data['selected_capsule_id'] = capsule_id
    except ValueError:
        await update.message.reply_text(t('invalid_capsule_id'))
        return
    action = context.user_data.get('action')
    if not await check_capsule_ownership(update, capsule_id):
        return
    if action == "add_recipient":
        await update.message.reply_text(t('enter_recipients'))
        context.user_data['state'] = "adding_recipient"
    elif action == "send_capsule":
        await handle_send_capsule_logic(update, context, capsule_id)
    elif action == "delete_capsule":
        await update.message.reply_text(
            t('confirm_delete'),
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–î–∞", callback_data="confirm_delete"),
                 InlineKeyboardButton("–ù–µ—Ç", callback_data="cancel_delete")]
            ])
        )
    elif action == "edit_capsule":
        await update.message.reply_text(t('enter_new_content'))
        context.user_data['state'] = "editing_capsule_content"
    elif action == "view_recipients":
        await handle_view_recipients_logic(update, context, capsule_id)
    elif action == "select_send_date":
        keyboard = [
            [InlineKeyboardButton(t('through_week'), callback_data='week')],
            [InlineKeyboardButton(t('through_month'), callback_data='month')],
            [InlineKeyboardButton(t('select_date'), callback_data='calendar')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(t('choose_send_date'), reply_markup=reply_markup)
        context.user_data['state'] = "selecting_send_date"

async def handle_date_buttons(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏."""
    query = update.callback_query
    if query.data == 'week':
        send_date = datetime.now(pytz.utc) + timedelta(weeks=1)
        context.user_data['send_date'] = send_date
        await query.edit_message_text(t('date_selected', date=send_date.strftime('%d.%m.%Y %H:%M')))
        await save_send_date(update, context)
    elif query.data == 'month':
        send_date = datetime.now(pytz.utc) + timedelta(days=30)
        context.user_data['send_date'] = send_date
        await query.edit_message_text(t('date_selected', date=send_date.strftime('%d.%m.%Y %H:%M')))
        await save_send_date(update, context)
    elif query.data == 'calendar':
        await query.edit_message_text(
            "üìÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –î–î.–ú–ú.–ì–ì–ì–ì.\n"
            "–ü—Ä–∏–º–µ—Ä: 21:12 17.03.2025\n"
        )
        context.user_data['state'] = "entering_custom_date"

async def handle_calendar_selection(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (—É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è)."""
    query = update.callback_query
    selected_day = int(query.data.split('_')[1])
    send_date = datetime.now(pytz.utc).replace(day=selected_day, hour=0, minute=0, second=0, microsecond=0)
    context.user_data['send_date'] = send_date
    await query.edit_message_text(t('date_selected', date=send_date.strftime('%d.%m.%Y %H:%M')))
    await save_send_date(update, context)

async def handle_delete_confirmation(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–ø—Å—É–ª—ã."""
    query = update.callback_query
    if query.data == "confirm_delete":
        capsule_id = context.user_data.get('selected_capsule_id')
        delete_capsule(capsule_id)
        await query.edit_message_text(t('capsule_deleted', capsule_id=capsule_id))
    else:
        await query.edit_message_text(t('delete_canceled'))
    context.user_data['state'] = "idle"

async def handle_text(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    text = update.message.text.strip()
    state = context.user_data.get('state', 'idle')
    actions = {
        t("create_capsule_btn"): create_capsule_command,
        t("view_capsules_btn"): view_capsules_command,
        t("add_recipient_btn"): add_recipient_command,
        t("send_capsule_btn"): send_capsule_command,
        t("delete_capsule_btn"): delete_capsule_command,
        t("edit_capsule_btn"): edit_capsule_command,
        t("view_recipients_btn"): view_recipients_command,
        t("help_btn"): help_command,
        t("select_send_date_btn"): select_send_date,
        t("support_author_btn"): support_author,
        t("change_language_btn"): change_language
    }
    if text in actions:
        await actions[text](update, context)
    elif state == CREATING_CAPSULE:
        await handle_create_capsule_steps(update, context, text)
    elif state == "adding_recipient":
        await handle_recipient(update, context)
    elif state == "editing_capsule_content":
        await handle_edit_capsule_content(update, context)
    elif state == "entering_custom_date":
        await handle_custom_date_input(update, context, text)
    elif state in [
        SELECTING_CAPSULE_FOR_RECIPIENTS,
        "sending_capsule",
        "deleting_capsule",
        "editing_capsule",
        "viewing_recipients",
        SELECTING_CAPSULE
    ]:
        await handle_capsule_selection(update, context)
    else:
        await update.message.reply_text(t('create_capsule_first'))

async def handle_custom_date_input(update: Update, context: CallbackContext, text: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–∞—Ç—ã."""
    try:
        local_tz = pytz.timezone('Europe/Moscow')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        naive_date = datetime.strptime(text, '%H:%M %d.%m.%Y')
        local_date = local_tz.localize(naive_date)
        send_date = local_date.astimezone(pytz.utc)

        now = datetime.now(pytz.utc)
        if send_date <= now:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º.\n"
                "–ü—Ä–∏–º–µ—Ä: 21:12 17.03.2025"
            )
            return

        context.user_data['send_date'] = send_date
        await update.message.reply_text(t('date_selected', date=local_date.strftime('%d.%m.%Y %H:%M')))
        await save_send_date(update, context)
        context.user_data['state'] = "idle"
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú –î–î.–ú–ú.–ì–ì–ì–ì.\n"
            "–ü—Ä–∏–º–µ—Ä: 21:12 17.03.2025"
        )

async def handle_create_capsule_steps(update: Update, context: CallbackContext, text: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —à–∞–≥–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ø—Å—É–ª—ã."""
    capsule_content = context.user_data.get('capsule_content', {"text": []})
    capsule_content['text'].append(text)
    context.user_data['capsule_content'] = capsule_content
    save_capsule_content(context, context.user_data['current_capsule'])
    await update.message.reply_text(t('text_added'))

async def handle_recipient(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π."""
    try:
        usernames = set(update.message.text.strip().split())
        capsule_id = context.user_data.get('selected_capsule_id')
        for username in usernames:
            add_recipient(capsule_id, username.lstrip('@'))
        await update.message.reply_text(t('recipients_added', capsule_id=capsule_id))
        context.user_data['state'] = "idle"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {e}")
        await update.message.reply_text(t('error_general'))

async def handle_send_capsule_logic(update: Update, context: CallbackContext, capsule_id: int):
    """–õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–ø—Å—É–ª—ã."""
    try:
        capsule = fetch_data("capsules", {"id": capsule_id})
        if not capsule:
            await update.message.reply_text(t('invalid_capsule_id'))
            return
        recipients = get_capsule_recipients(capsule_id)
        if not recipients:
            await update.message.reply_text(t('no_recipients'))
            return
        content = json.loads(decrypt_data_aes(capsule[0]['content'], ENCRYPTION_KEY_BYTES))
        for recipient in recipients:
            chat_id = get_chat_id(recipient['recipient_username'])
            if chat_id:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=t('capsule_received', sender=update.effective_user.username)
                )
                for item in content.get('text', []):
                    await context.bot.send_message(chat_id, item)
                for item in content.get('stickers', []):
                    await context.bot.send_sticker(chat_id, item)
                for item in content.get('photos', []):
                    await context.bot.send_photo(chat_id, item)
                for item in content.get('documents', []):
                    await context.bot.send_document(chat_id, item)
                for item in content.get('voices', []):
                    await context.bot.send_voice(chat_id, item)
                for item in content.get('videos', []):
                    await context.bot.send_video(chat_id, item)
                for item in content.get('audios', []):
                    await context.bot.send_audio(chat_id, item)
                await update.message.reply_text(t('capsule_sent', recipient=recipient['recipient_username']))
            else:
                await update.message.reply_text(t('recipient_not_registered', recipient=recipient['recipient_username']))
        context.user_data['state'] = "idle"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞–ø—Å—É–ª—ã: {e}")
        await update.message.reply_text(t('service_unavailable'))

async def handle_edit_capsule_content(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–∞–ø—Å—É–ª—ã."""
    try:
        capsule_id = context.user_data.get('selected_capsule_id')
        content = json.dumps({"text": [update.message.text]}, ensure_ascii=False)
        edit_capsule(capsule_id, content=content)
        await update.message.reply_text(t('capsule_edited', capsule_id=capsule_id))
        context.user_data['state'] = "idle"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–∞–ø—Å—É–ª—ã: {e}")
        await update.message.reply_text(t('error_general'))

async def handle_view_recipients_logic(update: Update, context: CallbackContext, capsule_id: int):
    """–õ–æ–≥–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∫–∞–ø—Å—É–ª—ã."""
    try:
        recipients = get_capsule_recipients(capsule_id)
        if recipients:
            recipient_list = "\n".join([f"@{r['recipient_username']}" for r in recipients])
            await update.message.reply_text(t('recipients_list', capsule_id=capsule_id, recipients=recipient_list))
        else:
            await update.message.reply_text(t('no_recipients_for_capsule', capsule_id=capsule_id))
        context.user_data['state'] = "idle"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {e}")
        await update.message.reply_text(t('error_general'))

async def handle_photo(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –≤ –∫–∞–ø—Å—É–ª—É."""
    if not context.user_data.get('current_capsule'):
        await update.message.reply_text(t('create_capsule_first'))
        return
    capsule_content = context.user_data.get('capsule_content', {"photos": []})
    photo_file_id = (await update.message.photo[-1].get_file()).file_id
    capsule_content.setdefault('photos', []).append(photo_file_id)
    context.user_data['capsule_content'] = capsule_content
    save_capsule_content(context, context.user_data['current_capsule'])
    await update.message.reply_text(t('photo_added'))

async def handle_media(update: Update, context: CallbackContext, media_type: str, file_attr: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤."""
    if not context.user_data.get('current_capsule'):
        await update.message.reply_text(t('create_capsule_first'))
        return
    capsule_content = context.user_data.get('capsule_content', {media_type: []})
    try:
        file_id = (await getattr(update.message, file_attr).get_file()).file_id
        capsule_content.setdefault(media_type, []).append(file_id)
        context.user_data['capsule_content'] = capsule_content
        save_capsule_content(context, context.user_data['current_capsule'])
        await update.message.reply_text(t(f'{media_type[:-1]}_added'))
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω {media_type[:-1]} –≤ –∫–∞–ø—Å—É–ª—É #{context.user_data['current_capsule']}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {media_type[:-1]}: {e}")
        await update.message.reply_text(t('error_general'))

async def handle_video(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ."""
    await handle_media(update, context, "videos", "video")

async def handle_audio(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ."""
    await handle_media(update, context, "audios", "audio")

async def handle_document(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
    await handle_media(update, context, "documents", "document")

async def handle_sticker(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞."""
    await handle_media(update, context, "stickers", "sticker")

async def handle_voice(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    await handle_media(update, context, "voices", "voice")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def check_capsule_ownership(update: Update, capsule_id: int, query=None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–Ω–∏—è –∫–∞–ø—Å—É–ª–æ–π."""
    user = fetch_data("users", {"telegram_id": update.effective_user.id})
    if not user:
        if query:
            await query.edit_message_text(t('not_registered'))
        else:
            await update.message.reply_text(t('not_registered'))
        return False
    capsule = fetch_data("capsules", {"id": capsule_id})
    if not capsule or capsule[0]['creator_id'] != user[0]['id']:
        if query:
            await query.edit_message_text(t('not_your_capsule'))
        else:
            await update.message.reply_text(t('not_your_capsule'))
        return False
    return True

def save_capsule_content(context: CallbackContext, capsule_id: int):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–∞–ø—Å—É–ª—ã."""
    content = context.user_data.get('capsule_content', {})
    json_str = json.dumps(content, ensure_ascii=False)
    encrypted = encrypt_data_aes(json_str, ENCRYPTION_KEY_BYTES)
    update_data("capsules", {"id": capsule_id}, {"content": encrypted})

async def save_send_date(update: Update, context: CallbackContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–ø—Å—É–ª—ã."""
    try:
        send_date = context.user_data.get('send_date')
        capsule_id = context.user_data.get('selected_capsule_id')
        if not send_date or not capsule_id:
            await update.callback_query.edit_message_text(t('error_general'))
            return

        edit_capsule(capsule_id, scheduled_at=send_date)
        logger.info(f"–ü–ª–∞–Ω–∏—Ä—É—é –∑–∞–¥–∞—á—É –¥–ª—è –∫–∞–ø—Å—É–ª—ã {capsule_id} –Ω–∞ {send_date}")
        send_capsule_task.apply_async((capsule_id,), eta=send_date)
        logger.info(f"–ó–∞–¥–∞—á–∞ –¥–ª—è –∫–∞–ø—Å—É–ª—ã {capsule_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞")

        await update.callback_query.edit_message_text(t('date_set', date=send_date.strftime('%d.%m.%Y %H:%M')))
        context.user_data['state'] = "idle"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–∞—Ç—ã –¥–ª—è –∫–∞–ø—Å—É–ª—ã {capsule_id}: {e}")
        await update.callback_query.edit_message_text(t('error_general'))

async def post_init(application):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    logger.info("–ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á")
    try:
        capsules = fetch_data("capsules")
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(capsules)} –∫–∞–ø—Å—É–ª –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

        now = datetime.now(pytz.utc)
        logger.info(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è UTC: {now}")

        for capsule in capsules:
            if capsule.get('scheduled_at'):
                scheduled_at = datetime.fromisoformat(capsule['scheduled_at']).replace(tzinfo=pytz.utc)
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ø—Å—É–ª—ã {capsule['id']}, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –Ω–∞ {scheduled_at}")

                if scheduled_at > now:
                    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–ø—Å—É–ª—ã {capsule['id']} –≤ Celery")
                    send_capsule_task.apply_async((capsule['id'],), eta=scheduled_at)
                    logger.info(f"–ó–∞–¥–∞—á–∞ –¥–ª—è –∫–∞–ø—Å—É–ª—ã {capsule['id']} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {scheduled_at}")
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏: {e}")

async def check_bot_permissions(context: CallbackContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞."""
    me = await context.bot.get_me()
    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ @{me.username}")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    start_services()
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    await check_bot_permissions(application)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("create_capsule", create_capsule_command))
    application.add_handler(CommandHandler("add_recipient", add_recipient_command))
    application.add_handler(CommandHandler("view_capsules", view_capsules_command))
    application.add_handler(CommandHandler("send_capsule", send_capsule_command))
    application.add_handler(CommandHandler("delete_capsule", delete_capsule_command))
    application.add_handler(CommandHandler("edit_capsule", edit_capsule_command))
    application.add_handler(CommandHandler("view_recipients", view_recipients_command))
    application.add_handler(CommandHandler("support_author", support_author))
    application.add_handler(CommandHandler("select_send_date", select_send_date))
    application.add_handler(CommandHandler("change_language", change_language))

    application.add_handler(CallbackQueryHandler(handle_language_selection, pattern=r'^(ru|en|es|fr|de)$'))
    application.add_handler(CallbackQueryHandler(handle_date_buttons, pattern=r'^(week|month|calendar)$'))
    application.add_handler(CallbackQueryHandler(handle_calendar_selection, pattern=r'^day_\d+$'))
    application.add_handler(CallbackQueryHandler(
        handle_delete_confirmation,
        pattern=r'^(confirm_delete|cancel_delete)$'
    ))

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.VIDEO, handle_video))
    application.add_handler(MessageHandler(filters.AUDIO, handle_audio))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    application.add_handler(MessageHandler(filters.Sticker.ALL, handle_sticker))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))

    await application.initialize()
    await post_init(application)
    await application.start()
    await application.updater.start_polling()
    await asyncio.Event().wait()

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )
    logger = logging.getLogger(__name__)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
    SUPABASE_URL = os.getenv("SUPABASE_URL")
    SUPABASE_KEY = os.getenv("SUPABASE_KEY")
    ENCRYPTION_KEY = os.getenv("ENCRYPTION_KEY", "default_key_32_bytes_long!!!!!!!")
    ENCRYPTION_KEY_BYTES = ENCRYPTION_KEY.encode('utf-8')[:32].ljust(32, b'\0')

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
    CREATING_CAPSULE = "creating_capsule"
    SELECTING_CAPSULE = "selecting_capsule"
    SELECTING_CAPSULE_FOR_RECIPIENTS = "selecting_capsule_for_recipients"

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    nest_asyncio.apply()
    asyncio.run(main())
