import logging
import asyncio
import subprocess
import time
import os
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackQueryHandler, CallbackContext
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding
from cryptography.hazmat.backends import default_backend
import json
from datetime import datetime, timedelta
from supabase import create_client, Client
from typing import Optional, List
from dotenv import load_dotenv
from tasks import send_capsule_task
import sys
import pytz
import nest_asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)
nest_asyncio.apply()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ENCRYPTION_KEY = os.getenv("ENCRYPTION_KEY")
if not all([SUPABASE_URL, SUPABASE_KEY, TELEGRAM_TOKEN, ENCRYPTION_KEY]):
    logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    sys.exit(1)
ENCRYPTION_KEY_BYTES = bytes.fromhex(ENCRYPTION_KEY)
if len(ENCRYPTION_KEY_BYTES) != 32:
    logger.error("–î–ª–∏–Ω–∞ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 32 –±–∞–π—Ç–∞ –¥–ª—è AES-256")
    sys.exit(1)
supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
scheduler = AsyncIOScheduler(timezone=pytz.utc)
bot: Optional[Bot] = None

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–µ—Å–µ–¥—ã
CAPSULE_TITLE, CAPSULE_CONTENT, SCHEDULE_TIME, ADD_RECIPIENT, SELECTING_SEND_DATE, SELECTING_CAPSULE, SELECTING_CAPSULE_FOR_RECIPIENTS, CREATING_CAPSULE = range(8)

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
MAX_TEXTS = 10
MAX_PHOTOS = 5
MAX_VIDEOS = 5
MAX_AUDIOS = 5
MAX_DOCUMENTS = 5
MAX_STICKERS = 5
MAX_VOICES = 5

# –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
LOCALE = 'ru'
TRANSLATIONS = {
    'ru': {
        "start_message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TimeCapsuleBot! üì¨\n–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞–ø—Å—É–ª—ã –≤—Ä–µ–º–µ–Ω–∏ —Å —Ç–µ–∫—Å—Ç–æ–º, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ –¥—Ä—É–≥–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö —Å–µ–±–µ –∏–ª–∏ –¥—Ä—É–∑—å—è–º –≤ –±—É–¥—É—â–µ–º.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
        "help_message": "üìã *–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ TimeCapsuleBot*\n\n"
                        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n"
                        "/create_capsule - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞–ø—Å—É–ª—É –≤—Ä–µ–º–µ–Ω–∏.\n*–ü—Ä–∏–º–µ—Ä:* –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∏ –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏.\n"
                        "/add_recipient - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞–ø—Å—É–ª—É.\n*–ü—Ä–∏–º–µ—Ä:* @Friend1 @Friend2\n"
                        "/view_capsules - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞–ø—Å—É–ª —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–æ–º.\n"
                        "/send_capsule - –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–ø—Å—É–ª—É –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º.\n"
                        "/delete_capsule - –£–¥–∞–ª–∏—Ç—å –∫–∞–ø—Å—É–ª—É, –µ—Å–ª–∏ –æ–Ω–∞ –≤–∞–º –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞.\n"
                        "/edit_capsule - –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–ø—Å—É–ª—ã (—Ç–µ–∫—Å—Ç).\n"
                        "/view_recipients - –ü–æ–∫–∞–∑–∞—Ç—å, –∫—Ç–æ –ø–æ–ª—É—á–∏—Ç –≤–∞—à—É –∫–∞–ø—Å—É–ª—É.\n"
                        "/select_send_date - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–ø—Å—É–ª—ã.\n*–ü—Ä–∏–º–µ—Ä:* –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å.\n"
                        "/support_author - –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –±–æ—Ç–∞.\n"
                        "/change_language - –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.\n\n"
                        "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –°–æ–∑–¥–∞–π—Ç–µ –∫–∞–ø—Å—É–ª—É –∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å –º–µ–¥–∏–∞!",
        "change_language": "üåç –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
        "select_language": "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —è–∑—ã–∫:",
        "capsule_created": "‚úÖ –ö–∞–ø—Å—É–ª–∞ #{capsule_id} —Å–æ–∑–¥–∞–Ω–∞!\n–î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ—ë —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.",
        "enter_recipients": "üë• –í–≤–µ–¥–∏—Ç–µ Telegram-–∏–º–µ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n*–ü—Ä–∏–º–µ—Ä:* @Friend1 @Friend2\n–û–Ω–∏ –ø–æ–ª—É—á–∞—Ç –∫–∞–ø—Å—É–ª—É, –∫–æ–≥–¥–∞ –≤—ã –µ—ë –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –∏–ª–∏ –Ω–∞—Å—Ç—É–ø–∏—Ç –∑–∞–¥–∞–Ω–Ω–∞—è –¥–∞—Ç–∞.",
        "select_capsule": "üì¶ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–ø—Å—É–ª—ã –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è:",
        "invalid_capsule_id": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–∞–ø—Å—É–ª—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞–ø—Å—É–ª —Å –ø–æ–º–æ—â—å—é '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–ø—Å—É–ª—ã'.",
        "recipients_added": "‚úÖ –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–ø—Å—É–ª—É #{capsule_id}!\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—ë —Å—Ä–∞–∑—É.",
        "error_general": "‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @SupportBot.",
        "service_unavailable": "üõ† –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        "your_capsules": "üìã *–í–∞—à–∏ –∫–∞–ø—Å—É–ª—ã –≤—Ä–µ–º–µ–Ω–∏:*\n",
        "no_capsules": "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞–ø—Å—É–ª. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Å –ø–æ–º–æ—â—å—é '–°–æ–∑–¥–∞—Ç—å –∫–∞–ø—Å—É–ª—É'!",
        "created_at": "–°–æ–∑–¥–∞–Ω–æ",
        "status": "–°—Ç–∞—Ç—É—Å",
        "scheduled": "‚è≥ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ",
        "draft": "‚úèÔ∏è –ß–µ—Ä–Ω–æ–≤–∏–∫",
        "enter_capsule_id_to_send": "üì® –í–≤–µ–¥–∏—Ç–µ ID –∫–∞–ø—Å—É–ª—ã –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, #5):",
        "no_recipients": "‚ùå –í —ç—Ç–æ–π –∫–∞–ø—Å—É–ª–µ –Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é '–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è'.",
        "capsule_received": "üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –∫–∞–ø—Å—É–ª—É –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç @{sender}!\n–í–æ—Ç –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:",
        "capsule_sent": "üì¨ –ö–∞–ø—Å—É–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ @{recipient}!\n–û–Ω–∏ —É–≤–∏–¥—è—Ç –µ—ë –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.",
        "recipient_not_registered": "‚ö†Ô∏è –ü–æ–ª—É—á–∞—Ç–µ–ª—å @{recipient} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ –∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç –∫–∞–ø—Å—É–ª—É.",
        "confirm_delete": "üóë –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞–ø—Å—É–ª—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        "capsule_deleted": "‚úÖ –ö–∞–ø—Å—É–ª–∞ #{capsule_id} —É–¥–∞–ª–µ–Ω–∞.",
        "delete_canceled": "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ö–∞–ø—Å—É–ª–∞ –æ—Å—Ç–∞–ª–∞—Å—å –Ω–∞ –º–µ—Å—Ç–µ.",
        "enter_new_content": "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–ø—Å—É–ª—ã (—Å—Ç–∞—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–º–µ–Ω—ë–Ω):",
        "capsule_edited": "‚úÖ –ö–∞–ø—Å—É–ª–∞ #{capsule_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å –Ω–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º!",
        "recipients_list": "üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ –∫–∞–ø—Å—É–ª—ã #{capsule_id}:\n{recipients}",
        "no_recipients_for_capsule": "üì≠ –í –∫–∞–ø—Å—É–ª–µ #{capsule_id} –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π.",
        "choose_send_date": "üìÖ –ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–ø—Å—É–ª—É?\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
        "through_week": "–ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é",
        "through_month": "–ß–µ—Ä–µ–∑ –º–µ—Å—è—Ü",
        "select_date": "–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É",
        "date_selected": "üìÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {date}\n–ö–∞–ø—Å—É–ª–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.",
        "date_set": "‚úÖ –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–ø—Å—É–ª—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {date}. –û–∂–∏–¥–∞–π—Ç–µ!",
        "support_author": "üíñ –ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –±–æ—Ç–∞:\n{url}\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞!",
        "create_capsule_first": "üì¶ –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞–ø—Å—É–ª—É —Å –ø–æ–º–æ—â—å—é '–°–æ–∑–¥–∞—Ç—å –∫–∞–ø—Å—É–ª—É', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤ –Ω–µ—ë –∫–æ–Ω—Ç–µ–Ω—Ç.",
        "text_added": "‚úÖ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–ø—Å—É–ª—É!",
        "photo_added": "‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–ø—Å—É–ª—É!",
        "video_added": "‚úÖ –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–ø—Å—É–ª—É!",
        "audio_added": "‚úÖ –ê—É–¥–∏–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–ø—Å—É–ª—É!",
        "document_added": "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–ø—Å—É–ª—É!",
        "sticker_added": "‚úÖ –°—Ç–∏–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–ø—Å—É–ª—É!",
        "voice_added": "‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–ø—Å—É–ª—É!",
        "not_registered": "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        "not_your_capsule": "‚ùå –≠—Ç–∞ –∫–∞–ø—Å—É–ª–∞ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç. –í—ã –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ —Å–≤–æ–∏–º–∏ –∫–∞–ø—Å—É–ª–∞–º–∏.",
        "today": "–°–µ–≥–æ–¥–Ω—è",
        "tomorrow": "–ó–∞–≤—Ç—Ä–∞",
        "content_limit_exceeded": "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç: –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ {type}.",
    },
    'en': {
        "start_message": "Welcome to TimeCapsuleBot! üì¨\nI‚Äôll help you create time capsules with text, photos, videos, and more to send to yourself or friends in the future.\nUse the buttons below to get started!",
        "help_message": "üìã *TimeCapsuleBot Command List*\n\n"
                        "/start - Launch the bot and open the main menu.\n"
                        "/create_capsule - Create a new time capsule.\n*Example:* Add text, photos, or videos, set recipients and a send date.\n"
                        "/add_recipient - Add recipients to an existing capsule.\n*Example:* @Friend1 @Friend2\n"
                        "/view_capsules - View a list of your capsules with their status.\n"
                        "/send_capsule - Send a capsule to recipients immediately.\n"
                        "/delete_capsule - Delete a capsule if you no longer need it.\n"
                        "/edit_capsule - Edit the capsule‚Äôs content (text).\n"
                        "/view_recipients - See who will receive your capsule.\n"
                        "/select_send_date - Set a send date for the capsule.\n*Example:* In a week or a specific day.\n"
                        "/support_author - Support the bot‚Äôs developer.\n"
                        "/change_language - Change the interface language.\n\n"
                        "üí° Tip: Create a capsule and experiment with media!",
        "change_language": "üåç Change Language",
        "select_language": "Select your language:",
        "capsule_created": "‚úÖ Capsule #{capsule_id} created!\nAdd text, photos, or videos to it.",
        "enter_recipients": "üë• Enter Telegram usernames of recipients separated by spaces.\n*Example:* @Friend1 @Friend2\nThey‚Äôll receive the capsule when you send it or the scheduled date arrives.",
        "select_capsule": "üì¶ Enter the capsule number for the action:",
        "invalid_capsule_id": "‚ùå Invalid capsule ID. Check your capsule list with 'View Capsules'.",
        "recipients_added": "‚úÖ Recipients added to capsule #{capsule_id}!\nNow you can set a send date or send it immediately.",
        "error_general": "‚ö†Ô∏è Something went wrong. Try again or contact support @SupportBot.",
        "service_unavailable": "üõ† Service temporarily unavailable. Please wait and try again later.",
        "your_capsules": "üìã *Your Time Capsules:*\n",
        "no_capsules": "üì≠ You don‚Äôt have any capsules yet. Create your first one with 'Create Capsule'!",
        "created_at": "Created",
        "status": "Status",
        "scheduled": "‚è≥ Scheduled",
        "draft": "‚úèÔ∏è Draft",
        "enter_capsule_id_to_send": "üì® Enter the capsule ID to send immediately (e.g., #5):",
        "no_recipients": "‚ùå This capsule has no recipients. Add them with 'Add Recipient'.",
        "capsule_received": "üéâ You‚Äôve received a time capsule from @{sender}!\nHere‚Äôs its content:",
        "capsule_sent": "üì¨ Capsule successfully sent to @{recipient}!\nThey‚Äôll see it now.",
        "recipient_not_registered": "‚ö†Ô∏è Recipient @{recipient} isn‚Äôt registered with the bot and won‚Äôt receive the capsule.",
        "confirm_delete": "üóë Are you sure you want to delete this capsule? This action cannot be undone.",
        "capsule_deleted": "‚úÖ Capsule #{capsule_id} deleted.",
        "delete_canceled": "‚ùå Deletion canceled. The capsule remains intact.",
        "enter_new_content": "‚úèÔ∏è Enter new text for the capsule (old content will be replaced):",
        "capsule_edited": "‚úÖ Capsule #{capsule_id} updated with new content!",
        "recipients_list": "üë• Recipients of capsule #{capsule_id}:\n{recipients}",
        "no_recipients_for_capsule": "üì≠ No recipients found for capsule #{capsule_id}.",
        "choose_send_date": "üìÖ When should the capsule be sent?\nChoose an option:",
        "through_week": "In a week",
        "through_month": "In a month",
        "select_date": "Select a date",
        "date_selected": "üìÖ You‚Äôve selected: {date}\nThe capsule will be sent at this time.",
        "date_set": "‚úÖ Capsule send date set to {date}. Stay tuned!",
        "support_author": "üíñ Support the bot‚Äôs author:\n{url}\nThanks for helping the project grow!",
        "create_capsule_first": "üì¶ First, create a capsule with 'Create Capsule' to add content.",
        "text_added": "‚úÖ Text message added to the capsule!",
        "photo_added": "‚úÖ Photo added to the capsule!",
        "video_added": "‚úÖ Video added to the capsule!",
        "audio_added": "‚úÖ Audio added to the capsule!",
        "document_added": "‚úÖ Document added to the capsule!",
        "sticker_added": "‚úÖ Sticker added to the capsule!",
        "voice_added": "‚úÖ Voice message added to the capsule!",
        "not_registered": "‚ö†Ô∏è You‚Äôre not registered with the bot. Press /start to begin.",
        "not_your_capsule": "‚ùå This capsule doesn‚Äôt belong to you. You can only manage your own capsules.",
        "today": "Today",
        "tomorrow": "Tomorrow",
        "content_limit_exceeded": "‚ö†Ô∏è Limit exceeded: you‚Äôve added too many {type}.",
    }
}

def t(key: str, **kwargs) -> str:
    translation = TRANSLATIONS.get(LOCALE, TRANSLATIONS['en']).get(key, key)
    return translation.format(**kwargs) if kwargs else translation

# –§—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
def start_process(command, name):
    try:
        process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        logger.info(f"{name} –∑–∞–ø—É—â–µ–Ω —Å PID: {process.pid}")
        time.sleep(2)
        if process.poll() is None:
            logger.info(f"{name} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")
            return True
        else:
            error = process.stderr.read().decode()
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {name}: {error}")
            return False
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å {name}: {e}")
        return False

def start_services():
    redis_url = os.getenv("REDIS_URL")
    if not redis_url:
        logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è REDIS_URL –Ω–µ –∑–∞–¥–∞–Ω–∞.")
        sys.exit(1)
    celery_command = "celery -A celery_config.app worker --loglevel=info --pool=solo"
    if not start_process(celery_command, "Celery"):
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Celery.")
        sys.exit(1)

# –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
def encrypt_data_aes(data: str, key: bytes) -> str:
    iv = os.urandom(16)
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    padder = padding.PKCS7(128).padder()
    padded_data = padder.update(data.encode('utf-8')) + padder.finalize()
    encryptor = cipher.encryptor()
    encrypted = encryptor.update(padded_data) + encryptor.finalize()
    return (iv + encrypted).hex()

def decrypt_data_aes(encrypted_hex: str, key: bytes) -> str:
    data = bytes.fromhex(encrypted_hex)
    iv, encrypted = data[:16], data[16:]
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    decryptor = cipher.decryptor()
    decrypted = decryptor.update(encrypted) + decryptor.finalize()
    unpadder = padding.PKCS7(128).unpadder()
    unpadded = unpadder.update(decrypted) + unpadder.finalize()
    return unpadded.decode('utf-8')

# –†–∞–±–æ—Ç–∞ —Å Supabase
def fetch_data(table: str, query: dict = {}) -> list:
    try:
        response = supabase.table(table).select("*")
        for key, value in query.items():
            response = response.eq(key, value)
        return response.execute().data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Supabase: {e}")
        return []

def post_data(table: str, data: dict) -> list:
    try:
        return supabase.table(table).insert(data).execute().data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Supabase: {e}")
        return []

def update_data(table: str, query: dict, data: dict) -> list:
    try:
        query_builder = supabase.table(table).update(data)
        for key, value in query.items():
            query_builder = query_builder.eq(key, value)
        return query_builder.execute().data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ Supabase: {e}")
        return []

def delete_data(table: str, query: dict) -> list:
    try:
        return supabase.table(table).delete().eq(next(iter(query)), query[next(iter(query))]).execute().data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤ Supabase: {e}")
        return []

def get_chat_id(username: str) -> Optional[int]:
    response = fetch_data("users", {"username": username})
    return response[0]['chat_id'] if response else None

def add_user(username: str, telegram_id: int, chat_id: int):
    if not fetch_data("users", {"telegram_id": telegram_id}):
        post_data("users", {"telegram_id": telegram_id, "username": username, "chat_id": chat_id})

def generate_unique_capsule_number(creator_id: int) -> int:
    return len(fetch_data("capsules", {"creator_id": creator_id})) + 1

def create_capsule(creator_id: int, title: str, content: str, user_capsule_number: int, scheduled_at: Optional[datetime] = None) -> int:
    encrypted_content = encrypt_data_aes(content, ENCRYPTION_KEY_BYTES)
    data = {"creator_id": creator_id, "title": title, "content": encrypted_content, "user_capsule_number": user_capsule_number}
    if scheduled_at:
        data["scheduled_at"] = scheduled_at.astimezone(pytz.utc).isoformat()
    response = post_data("capsules", data)
    return response[0]['id'] if response else -1

def add_recipient(capsule_id: int, recipient_username: str):
    post_data("recipients", {"capsule_id": capsule_id, "recipient_username": recipient_username})

def delete_capsule(capsule_id: int):
    delete_data("recipients", {"capsule_id": capsule_id})
    delete_data("capsules", {"id": capsule_id})

def edit_capsule(capsule_id: int, title: Optional[str] = None, content: Optional[str] = None, scheduled_at: Optional[datetime] = None):
    data = {}
    if title:
        data["title"] = title
    if content:
        data["content"] = encrypt_data_aes(content, ENCRYPTION_KEY_BYTES)
    if scheduled_at:
        data["scheduled_at"] = scheduled_at.astimezone(pytz.utc).isoformat()
    if data:
        update_data("capsules", {"id": capsule_id}, data)

def get_user_capsules(telegram_id: int) -> list:
    user = fetch_data("users", {"telegram_id": telegram_id})
    return fetch_data("capsules", {"creator_id": user[0]['id']}) if user else []

def get_capsule_recipients(capsule_id: int) -> list:
    return fetch_data("recipients", {"capsule_id": capsule_id})

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏."""
    user = update.message.from_user
    add_user(user.username or str(user.id), user.id, update.message.chat_id)
    keyboard = [
        ["üì¶ –°–æ–∑–¥–∞—Ç—å –∫–∞–ø—Å—É–ª—É", "üìÇ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–ø—Å—É–ª—ã"],
        ["üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è", "üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–ø—Å—É–ª—É"],
        ["üóë –£–¥–∞–ª–∏—Ç—å –∫–∞–ø—Å—É–ª—É", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ø—Å—É–ª—É"],
        ["üë• –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π", "‚ùì –ü–æ–º–æ—â—å"],
        ["üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏", "üí∏ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞"],
        ["üåç –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(t('start_message'), reply_markup=reply_markup)

async def help_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ–º."""
    keyboard = [
        ["üì¶ –°–æ–∑–¥–∞—Ç—å –∫–∞–ø—Å—É–ª—É", "üìÇ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–ø—Å—É–ª—ã"],
        ["üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è", "üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–ø—Å—É–ª—É"],
        ["üóë –£–¥–∞–ª–∏—Ç—å –∫–∞–ø—Å—É–ª—É", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ø—Å—É–ª—É"],
        ["üë• –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π", "‚ùì –ü–æ–º–æ—â—å"],
        ["üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏", "üí∏ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞"],
        ["üåç –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(t('help_message'), reply_markup=reply_markup)

async def create_capsule_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /create_capsule. –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∫–∞–ø—Å—É–ª—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        user = update.message.from_user
        existing_user = fetch_data("users", {"telegram_id": user.id})
        if not existing_user:
            response = post_data("users", {"telegram_id": user.id, "username": user.username or str(user.id), "chat_id": update.message.chat_id})
            creator_id = response[0]['id']
        else:
            creator_id = existing_user[0]['id']
        initial_content = json.dumps({"text": [], "photos": [], "videos": [], "audios": [], "documents": [], "stickers": [], "voices": []}, ensure_ascii=False)
        user_capsule_number = generate_unique_capsule_number(creator_id)
        capsule_id = create_capsule(creator_id, "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è", initial_content, user_capsule_number)
        if capsule_id == -1:
            await update.message.reply_text(t('service_unavailable'))
            return
        context.user_data['current_capsule'] = capsule_id
        context.user_data['capsule_content'] = json.loads(initial_content)
        context.user_data['state'] = CREATING_CAPSULE
        await update.message.reply_text(t('capsule_created', capsule_id=capsule_id))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–ø—Å—É–ª—ã: {e}")
        await update.message.reply_text(t('error_general'))

async def show_capsule_selection(update: Update, context: CallbackContext, action: str):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –∫–∞–ø—Å—É–ª—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è."""
    await update.message.reply_text(t('select_capsule'))
    context.user_data['action'] = action
    return True

async def add_recipient_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_recipient. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –∫–∞–ø—Å—É–ª—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π."""
    if await show_capsule_selection(update, context, "add_recipient"):
        context.user_data['state'] = SELECTING_CAPSULE_FOR_RECIPIENTS

async def view_capsules_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /view_capsules. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–ø—Å—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        capsules = get_user_capsules(update.message.from_user.id)
        if capsules:
            response = [f"üì¶ #{c['id']} {c['title']}\nüïí {t('created_at')}: {datetime.fromisoformat(c['created_at']).strftime('%d.%m.%Y %H:%M')}\nüîí {t('status')}: {t('scheduled') if c['scheduled_at'] else t('draft')}" for c in capsules]
            await update.message.reply_text(t('your_capsules') + "\n" + "\n".join(response), parse_mode="Markdown")
        else:
            await update.message.reply_text(t('no_capsules'))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–ø—Å—É–ª: {e}")
        await update.message.reply_text(t('error_general'))

async def send_capsule_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /send_capsule. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –∫–∞–ø—Å—É–ª—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏."""
    if await show_capsule_selection(update, context, "send_capsule"):
        context.user_data['state'] = "sending_capsule"

async def delete_capsule_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete_capsule. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –∫–∞–ø—Å—É–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    if await show_capsule_selection(update, context, "delete_capsule"):
        context.user_data['state'] = "deleting_capsule"

async def edit_capsule_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /edit_capsule. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –∫–∞–ø—Å—É–ª—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    if await show_capsule_selection(update, context, "edit_capsule"):
        context.user_data['state'] = "editing_capsule"

async def view_recipients_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /view_recipients. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –∫–∞–ø—Å—É–ª—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π."""
    if await show_capsule_selection(update, context, "view_recipients"):
        context.user_data['state'] = "viewing_recipients"

async def select_send_date(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /select_send_date. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –∫–∞–ø—Å—É–ª—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏."""
    if await show_capsule_selection(update, context, "select_send_date"):
        context.user_data['state'] = SELECTING_CAPSULE

async def support_author(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /support_author. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞–≤—Ç–æ—Ä–∞."""
    DONATION_URL = "https://www.donationalerts.com/r/lunarisqqq"
    await update.message.reply_text(t('support_author', url=DONATION_URL))

async def change_language(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /change_language. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞."""
    keyboard = [
        [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data="ru")],
        [InlineKeyboardButton("English", callback_data="en")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(t('select_language'), reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
async def handle_language_selection(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞. –û–±–Ω–æ–≤–ª—è–µ—Ç —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
    global LOCALE
    query = update.callback_query
    lang = query.data
    LOCALE = lang
    new_lang = "–†—É—Å—Å–∫–∏–π" if lang == 'ru' else "English"
    await query.edit_message_text(f"–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_lang}.")
    keyboard = [
        ["üì¶ –°–æ–∑–¥–∞—Ç—å –∫–∞–ø—Å—É–ª—É", "üìÇ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–ø—Å—É–ª—ã"],
        ["üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è", "üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–ø—Å—É–ª—É"],
        ["üóë –£–¥–∞–ª–∏—Ç—å –∫–∞–ø—Å—É–ª—É", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ø—Å—É–ª—É"],
        ["üë• –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π", "‚ùì –ü–æ–º–æ—â—å"],
        ["üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏", "üí∏ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞"],
        ["üåç –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=t('start_message'), reply_markup=reply_markup)

async def handle_capsule_selection(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞–ø—Å—É–ª—ã. –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."""
    text = update.message.text.strip()
    try:
        capsule_id = int(text.replace('#', ''))
        context.user_data['selected_capsule_id'] = capsule_id
    except ValueError:
        await update.message.reply_text(t('invalid_capsule_id'))
        return
    action = context.user_data.get('action')
    if not await check_capsule_ownership(update, capsule_id):
        return
    if action == "add_recipient":
        await update.message.reply_text(t('enter_recipients'))
        context.user_data['state'] = "adding_recipient"
    elif action == "send_capsule":
        await handle_send_capsule_logic(update, context, capsule_id)
    elif action == "delete_capsule":
        await update.message.reply_text(t('confirm_delete'), reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–î–∞", callback_data="confirm_delete"), InlineKeyboardButton("–ù–µ—Ç", callback_data="cancel_delete")]]))
    elif action == "edit_capsule":
        await update.message.reply_text(t('enter_new_content'))
        context.user_data['state'] = "editing_capsule_content"
    elif action == "view_recipients":
        await handle_view_recipients_logic(update, context, capsule_id)
    elif action == "select_send_date":
        keyboard = [
            [InlineKeyboardButton(t('through_week'), callback_data='week')],
            [InlineKeyboardButton(t('through_month'), callback_data='month')],
            [InlineKeyboardButton(t('select_date'), callback_data='calendar')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(t('choose_send_date'), reply_markup=reply_markup)
        context.user_data['state'] = "selecting_send_date"

async def handle_date_buttons(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é, –º–µ—Å—è—Ü –∏–ª–∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è."""
    query = update.callback_query
    if query.data == 'week':
        send_date = datetime.now(pytz.utc) + timedelta(weeks=1)
    elif query.data == 'month':
        send_date = datetime.now(pytz.utc) + timedelta(days=30)
    else:
        await handle_calendar(update, context)
        return
    context.user_data['send_date'] = send_date
    await query.edit_message_text(t('date_selected', date=send_date.strftime('%d.%m.%Y %H:%M')))
    await save_send_date(update, context)

async def handle_calendar(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞."""
    query = update.callback_query
    current_date = datetime.now(pytz.utc)
    keyboard = [[InlineKeyboardButton(f"{(current_date + timedelta(days=i)).day} ({t('today') if i == 0 else t('tomorrow') if i == 1 else f'{i} days'})", callback_data=f"day_{(current_date + timedelta(days=i)).day}")] for i in range(8)]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(t('select_date'), reply_markup=reply_markup)

async def handle_calendar_selection(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–ø—Å—É–ª—ã."""
    query = update.callback_query
    selected_day = int(query.data.split('_')[1])
    send_date = datetime.now(pytz.utc).replace(day=selected_day, hour=0, minute=0, second=0, microsecond=0)
    context.user_data['send_date'] = send_date
    await query.edit_message_text(t('date_selected', date=send_date.strftime('%d.%m.%Y %H:%M')))
    await save_send_date(update, context)

async def handle_delete_confirmation(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–ø—Å—É–ª—ã. –£–¥–∞–ª—è–µ—Ç –∫–∞–ø—Å—É–ª—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
    query = update.callback_query
    if query.data == "confirm_delete":
        capsule_id = context.user_data.get('selected_capsule_id')
        delete_capsule(capsule_id)
        await query.edit_message_text(t('capsule_deleted', capsule_id=capsule_id))
    else:
        await query.edit_message_text(t('delete_canceled'))
    context.user_data['state'] = "idle"

async def handle_text(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    text = update.message.text.strip()
    state = context.user_data.get('state', 'idle')
    actions = {
        "üì¶ –°–æ–∑–¥–∞—Ç—å –∫–∞–ø—Å—É–ª—É": create_capsule_command,
        "üìÇ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–ø—Å—É–ª—ã": view_capsules_command,
        "üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è": add_recipient_command,
        "üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–ø—Å—É–ª—É": send_capsule_command,
        "üóë –£–¥–∞–ª–∏—Ç—å –∫–∞–ø—Å—É–ª—É": delete_capsule_command,
        "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ø—Å—É–ª—É": edit_capsule_command,
        "üë• –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π": view_recipients_command,
        "‚ùì –ü–æ–º–æ—â—å": help_command,
        "üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏": select_send_date,
        "üí∏ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞": support_author,
        "üåç –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫": change_language
    }
    if text in actions:
        await actions[text](update, context)
    elif state == CREATING_CAPSULE:
        await handle_create_capsule_steps(update, context, text)
    elif state == "adding_recipient":
        await handle_recipient(update, context)
    elif state == "editing_capsule_content":
        await handle_edit_capsule_content(update, context)
    elif state in [SELECTING_CAPSULE_FOR_RECIPIENTS, "sending_capsule", "deleting_capsule", "editing_capsule", "viewing_recipients", SELECTING_CAPSULE]:
        await handle_capsule_selection(update, context)
    else:
        await update.message.reply_text(t('create_capsule_first'))

async def handle_create_capsule_steps(update: Update, context: CallbackContext, text: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —à–∞–≥–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ø—Å—É–ª—ã. –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ –∫–∞–ø—Å—É–ª—É."""
    capsule_content = context.user_data.get('capsule_content', {"text": []})
    if len(capsule_content['text']) < MAX_TEXTS:
        capsule_content['text'].append(text)
        context.user_data['capsule_content'] = capsule_content
        save_capsule_content(context, context.user_data['current_capsule'])
        await update.message.reply_text(t('text_added'))
    else:
        await update.message.reply_text(t('content_limit_exceeded', type="—Ç–µ–∫—Å—Ç"))

async def handle_recipient(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π."""
    try:
        usernames = set(update.message.text.strip().split())
        capsule_id = context.user_data.get('selected_capsule_id')
        for username in usernames:
            add_recipient(capsule_id, username.lstrip('@'))
        await update.message.reply_text(t('recipients_added', capsule_id=capsule_id))
        context.user_data['state'] = "idle"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {e}")
        await update.message.reply_text(t('error_general'))

async def handle_send_capsule_logic(update: Update, context: CallbackContext, capsule_id: int):
    """–õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–ø—Å—É–ª—ã."""
    try:
        capsule = fetch_data("capsules", {"id": capsule_id})
        if not capsule:
            await update.message.reply_text(t('invalid_capsule_id'))
            return
        recipients = get_capsule_recipients(capsule_id)
        if not recipients:
            await update.message.reply_text(t('no_recipients'))
            return
        content = json.loads(decrypt_data_aes(capsule[0]['content'], ENCRYPTION_KEY_BYTES))
        for recipient in recipients:
            chat_id = get_chat_id(recipient['recipient_username'])
            if chat_id:
                await context.bot.send_message(chat_id=chat_id, text=t('capsule_received', sender=update.effective_user.username))
                for item in content.get('text', []):
                    await context.bot.send_message(chat_id, item)
                for item in content.get('stickers', []):
                    await context.bot.send_sticker(chat_id, item)
                for item in content.get('photos', []):
                    await context.bot.send_photo(chat_id, item)
                for item in content.get('documents', []):
                    await context.bot.send_document(chat_id, item)
                for item in content.get('voices', []):
                    await context.bot.send_voice(chat_id, item)
                for item in content.get('videos', []):
                    await context.bot.send_video(chat_id, item)
                for item in content.get('audios', []):
                    await context.bot.send_audio(chat_id, item)
                await update.message.reply_text(t('capsule_sent', recipient=recipient['recipient_username']))
            else:
                await update.message.reply_text(t('recipient_not_registered', recipient=recipient['recipient_username']))
        context.user_data['state'] = "idle"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞–ø—Å—É–ª—ã: {e}")
        await update.message.reply_text(t('service_unavailable'))

async def handle_edit_capsule_content(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–∞–ø—Å—É–ª—ã."""
    try:
        capsule_id = context.user_data.get('selected_capsule_id')
        content = json.dumps({"text": [update.message.text]}, ensure_ascii=False)
        edit_capsule(capsule_id, content=content)
        await update.message.reply_text(t('capsule_edited', capsule_id=capsule_id))
        context.user_data['state'] = "idle"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–∞–ø—Å—É–ª—ã: {e}")
        await update.message.reply_text(t('error_general'))

async def handle_view_recipients_logic(update: Update, context: CallbackContext, capsule_id: int):
    """–õ–æ–≥–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∫–∞–ø—Å—É–ª—ã."""
    try:
        recipients = get_capsule_recipients(capsule_id)
        if recipients:
            recipient_list = "\n".join([f"@{r['recipient_username']}" for r in recipients])
            await update.message.reply_text(t('recipients_list', capsule_id=capsule_id, recipients=recipient_list))
        else:
            await update.message.reply_text(t('no_recipients_for_capsule', capsule_id=capsule_id))
        context.user_data['state'] = "idle"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {e}")
        await update.message.reply_text(t('error_general'))

async def handle_media(update: Update, context: CallbackContext, media_type: str, file_attr: str, max_limit: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤."""
    if not context.user_data.get('current_capsule'):
        await update.message.reply_text(t('create_capsule_first'))
        return
    capsule_content = context.user_data.get('capsule_content', {media_type: []})
    if len(capsule_content[media_type]) >= max_limit:
        await update.message.reply_text(t('content_limit_exceeded', type=media_type[:-1]))
        return
    try:
        file_id = (await getattr(update.message, file_attr).get_file()).file_id
        capsule_content.setdefault(media_type, []).append(file_id)
        context.user_data['capsule_content'] = capsule_content
        save_capsule_content(context, context.user_data['current_capsule'])
        await update.message.reply_text(t(f'{media_type[:-1]}_added'))
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω {media_type[:-1]} –≤ –∫–∞–ø—Å—É–ª—É #{context.user_data['current_capsule']}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {media_type[:-1]}: {e}")
        await update.message.reply_text(t('error_general'))

async def handle_photo(update: Update, context: CallbackContext):
    await handle_media(update, context, "photos", "photo[-1]", MAX_PHOTOS)

async def handle_video(update: Update, context: CallbackContext):
    await handle_media(update, context, "videos", "video", MAX_VIDEOS)

async def handle_audio(update: Update, context: CallbackContext):
    await handle_media(update, context, "audios", "audio", MAX_AUDIOS)

async def handle_document(update: Update, context: CallbackContext):
    await handle_media(update, context, "documents", "document", MAX_DOCUMENTS)

async def handle_sticker(update: Update, context: CallbackContext):
    await handle_media(update, context, "stickers", "sticker", MAX_STICKERS)

async def handle_voice(update: Update, context: CallbackContext):
    await handle_media(update, context, "voices", "voice", MAX_VOICES)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def check_capsule_ownership(update: Update, capsule_id: int, query=None) -> bool:
    user = fetch_data("users", {"telegram_id": update.effective_user.id})
    if not user:
        if query:
            await query.edit_message_text(t('not_registered'))
        else:
            await update.message.reply_text(t('not_registered'))
        return False
    capsule = fetch_data("capsules", {"id": capsule_id})
    if not capsule or capsule[0]['creator_id'] != user[0]['id']:
        if query:
            await query.edit_message_text(t('not_your_capsule'))
        else:
            await update.message.reply_text(t('not_your_capsule'))
        return False
    return True

def save_capsule_content(context: CallbackContext, capsule_id: int):
    content = context.user_data.get('capsule_content', {})
    json_str = json.dumps(content, ensure_ascii=False)
    encrypted = encrypt_data_aes(json_str, ENCRYPTION_KEY_BYTES)
    update_data("capsules", {"id": capsule_id}, {"content": encrypted})

async def save_send_date(update: Update, context: CallbackContext):
    try:
        send_date = context.user_data.get('send_date')
        capsule_id = context.user_data.get('selected_capsule_id')
        if not send_date or not capsule_id:
            await update.callback_query.edit_message_text(t('error_general'))
            return
        edit_capsule(capsule_id, scheduled_at=send_date)
        send_capsule_task.apply_async((capsule_id,), eta=send_date)
        await update.callback_query.edit_message_text(t('date_set', date=send_date.strftime('%d.%m.%Y %H:%M')))
        context.user_data['state'] = "idle"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–∞—Ç—ã: {e}")
        await update.callback_query.edit_message_text(t('service_unavailable'))

async def post_init(application):
    capsules = fetch_data("capsules")
    now = datetime.now(pytz.utc)
    for capsule in capsules:
        if capsule.get('scheduled_at'):
            scheduled_at = datetime.fromisoformat(capsule['scheduled_at']).replace(tzinfo=pytz.utc)
            if scheduled_at > now:
                send_capsule_task.apply_async((capsule['id'],), eta=scheduled_at)
                logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–ø—Å—É–ª—ã #{capsule['id']} –Ω–∞ {scheduled_at}")

async def check_bot_permissions(context: CallbackContext):
    me = await context.bot.get_me()
    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ @{me.username}")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    start_services()
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    await check_bot_permissions(application)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("create_capsule", create_capsule_command))
    application.add_handler(CommandHandler("add_recipient", add_recipient_command))
    application.add_handler(CommandHandler("view_capsules", view_capsules_command))
    application.add_handler(CommandHandler("send_capsule", send_capsule_command))
    application.add_handler(CommandHandler("delete_capsule", delete_capsule_command))
    application.add_handler(CommandHandler("edit_capsule", edit_capsule_command))
    application.add_handler(CommandHandler("view_recipients", view_recipients_command))
    application.add_handler(CommandHandler("support_author", support_author))
    application.add_handler(CommandHandler("select_send_date", select_send_date))
    application.add_handler(CommandHandler("change_language", change_language))
    application.add_handler(CallbackQueryHandler(handle_language_selection, pattern=r'^(ru|en)$'))
    application.add_handler(CallbackQueryHandler(handle_date_buttons, pattern=r'^(week|month|calendar)$'))
    application.add_handler(CallbackQueryHandler(handle_calendar_selection, pattern=r'^day_\d+$'))
    application.add_handler(CallbackQueryHandler(handle_delete_confirmation, pattern=r'^(confirm_delete|cancel_delete)$'))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.VIDEO, handle_video))
    application.add_handler(MessageHandler(filters.AUDIO, handle_audio))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    application.add_handler(MessageHandler(filters.Sticker.ALL, handle_sticker))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))
    await application.initialize()
    await post_init(application)
    scheduler.start()
    await application.start()
    await application.updater.start_polling()
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())
